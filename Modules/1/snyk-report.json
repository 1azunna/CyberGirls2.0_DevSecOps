{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2020-03-07T00:18:41.509507Z",
      "credit": [
        "Peter van der Zee"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[acorn](https://github.com/acornjs/acorn) is a tiny, fast JavaScript parser written in JavaScript.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nvia a regex in the form of `/[x-\\ud800]/u`, which causes the parser to enter an infinite loop. \r\n\r\nThis string is not a valid `UTF16` and is therefore not sanitized before reaching the parser. An application which processes untrusted input and passes it directly to `acorn`, will allow attackers to leverage the vulnerability leading to a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `acorn` to version 5.7.4, 6.4.1, 7.1.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802)\n\n- [GitHub Issue 6.x Branch](https://github.com/acornjs/acorn/issues/929)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1488)\n",
      "disclosureTime": "2020-03-02T19:21:25Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.7.4",
        "6.4.1",
        "7.1.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.at"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.nextIndex"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.at"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.nextIndex"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        }
      ],
      "id": "SNYK-JS-ACORN-559469",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6chw-6frg-f759"
        ],
        "NSP": [
          "1488"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-04-30T07:41:03.089378Z",
      "moduleName": "acorn",
      "packageManager": "npm",
      "packageName": "acorn",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-07T00:19:23Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802"
        },
        {
          "title": "GitHub Issue 6.x Branch",
          "url": "https://github.com/acornjs/acorn/issues/929"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1488"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=5.5.0 <5.7.4",
          ">=6.0.0 <6.4.1",
          ">=7.0.0 <7.1.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "static-module@2.2.5",
        "falafel@2.1.0",
        "acorn@5.7.3"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "static-module@2.2.5",
        "falafel@2.1.0",
        "acorn@5.7.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "acorn",
      "version": "5.7.3",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/acorn/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2020-03-07T00:18:41.509507Z",
      "credit": [
        "Peter van der Zee"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[acorn](https://github.com/acornjs/acorn) is a tiny, fast JavaScript parser written in JavaScript.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nvia a regex in the form of `/[x-\\ud800]/u`, which causes the parser to enter an infinite loop. \r\n\r\nThis string is not a valid `UTF16` and is therefore not sanitized before reaching the parser. An application which processes untrusted input and passes it directly to `acorn`, will allow attackers to leverage the vulnerability leading to a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `acorn` to version 5.7.4, 6.4.1, 7.1.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802)\n\n- [GitHub Issue 6.x Branch](https://github.com/acornjs/acorn/issues/929)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1488)\n",
      "disclosureTime": "2020-03-02T19:21:25Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "5.7.4",
        "6.4.1",
        "7.1.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.at"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.nextIndex"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.at"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/acorn.js",
            "functionName": "RegExpValidationState.prototype.nextIndex"
          },
          "version": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        }
      ],
      "id": "SNYK-JS-ACORN-559469",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6chw-6frg-f759"
        ],
        "NSP": [
          "1488"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-04-30T07:41:03.089378Z",
      "moduleName": "acorn",
      "packageManager": "npm",
      "packageName": "acorn",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-07T00:19:23Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802"
        },
        {
          "title": "GitHub Issue 6.x Branch",
          "url": "https://github.com/acornjs/acorn/issues/929"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1488"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=5.5.0 <5.7.4",
          ">=6.0.0 <6.4.1",
          ">=7.0.0 <7.1.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "static-module@3.0.3",
        "acorn-node@1.8.2",
        "acorn@7.1.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "static-module@3.0.3",
        "acorn-node@1.8.2",
        "acorn@7.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "acorn",
      "version": "7.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/acorn-node/node_modules/acorn/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-16T08:19:48.462528Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
      "disclosureTime": "2020-07-16T08:14:41Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.12.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-AJV-584908",
      "identifiers": {
        "CVE": [
          "CVE-2020-15366"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-16T13:58:04.600521Z",
      "moduleName": "ajv",
      "packageManager": "npm",
      "packageName": "ajv",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-16T13:58:04Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.12.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "request@2.88.0",
        "har-validator@5.1.3",
        "ajv@6.10.2"
      ],
      "upgradePath": [
        false,
        "request@2.88.0",
        "har-validator@5.1.3",
        "ajv@6.12.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ajv",
      "version": "6.10.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ajv/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-16T08:19:48.462528Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
      "disclosureTime": "2020-07-16T08:14:41Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.12.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-AJV-584908",
      "identifiers": {
        "CVE": [
          "CVE-2020-15366"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-16T13:58:04.600521Z",
      "moduleName": "ajv",
      "packageManager": "npm",
      "packageName": "ajv",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-16T13:58:04Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.12.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "request@2.88.0",
        "har-validator@5.1.3",
        "ajv@6.10.2"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "request@2.88.0",
        "har-validator@5.1.3",
        "ajv@6.12.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ajv",
      "version": "6.10.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ajv/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "string-width@3.1.0",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "concurrently@6.0.0",
        "yargs@16.2.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "cliui@5.0.0",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "concurrently@6.0.0",
        "yargs@16.2.0",
        "cliui@7.0.2",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "cliui@5.0.0",
        "string-width@3.1.0",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "concurrently@6.0.0",
        "yargs@16.2.0",
        "cliui@7.0.2",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "cliui@5.0.0",
        "wrap-ansi@5.1.0",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "concurrently@6.0.0",
        "yargs@16.2.0",
        "cliui@7.0.2",
        "wrap-ansi@7.0.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "cliui@5.0.0",
        "wrap-ansi@5.1.0",
        "string-width@3.1.0",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "concurrently@6.0.0",
        "yargs@16.2.0",
        "cliui@7.0.2",
        "wrap-ansi@7.0.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "replace@1.1.1",
        "yargs@12.0.5",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "replace@1.1.2",
        "yargs@15.0.2",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/replace/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "replace@1.1.1",
        "yargs@12.0.5",
        "cliui@4.1.0",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "replace@1.1.2",
        "yargs@15.0.2",
        "cliui@6.0.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/replace/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "replace@1.1.1",
        "yargs@12.0.5",
        "cliui@4.1.0",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "replace@1.1.2",
        "yargs@15.0.2",
        "cliui@6.0.0",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/replace/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.3",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.5",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/wide-align/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.3",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.5",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/wide-align/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.3",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.5",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/wide-align/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.3",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.5",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/wide-align/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.1",
        "5.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CVE": [
          "CVE-2021-3807"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-23T15:49:52.792982Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.1",
          ">2.1.1 <5.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.3",
        "string-width@2.1.1",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "npmlog@4.1.2",
        "gauge@2.7.4",
        "wide-align@1.1.5",
        "string-width@4.2.0",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/wide-align/node_modules/ansi-regex/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-08-28T12:18:44.906258Z",
      "credit": [
        "chalker"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
      "disclosureTime": "2020-08-27T15:16:42Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.2.1",
        "3.0.1",
        "4.0.3",
        "1.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-BL-608877",
      "identifiers": {
        "CVE": [
          "CVE-2020-8244"
        ],
        "CWE": [
          "CWE-9"
        ],
        "GHSA": [
          "GHSA-pp7h-53gx-mx7r"
        ],
        "NSP": [
          "1555"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-04T12:31:03.817670Z",
      "moduleName": "bl",
      "packageManager": "npm",
      "packageName": "bl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-28T12:18:48Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/966347"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.2.1",
          ">=3.0.0 <3.0.1",
          ">=4.0.0 <4.0.3",
          "<1.2.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "tar-stream@1.6.2",
        "bl@1.2.2"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "tar-stream@1.6.2",
        "bl@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "bl",
      "version": "1.2.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/bl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-08-28T12:18:44.906258Z",
      "credit": [
        "chalker"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
      "disclosureTime": "2020-08-27T15:16:42Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.2.1",
        "3.0.1",
        "4.0.3",
        "1.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-BL-608877",
      "identifiers": {
        "CVE": [
          "CVE-2020-8244"
        ],
        "CWE": [
          "CWE-9"
        ],
        "GHSA": [
          "GHSA-pp7h-53gx-mx7r"
        ],
        "NSP": [
          "1555"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-04T12:31:03.817670Z",
      "moduleName": "bl",
      "packageManager": "npm",
      "packageName": "bl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-28T12:18:48Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/966347"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.2.1",
          ">=3.0.0 <3.0.1",
          ">=4.0.0 <4.0.3",
          "<1.2.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-tar@4.1.1",
        "tar-stream@1.6.2",
        "bl@1.2.2"
      ],
      "upgradePath": [
        false,
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-tar@4.1.1",
        "tar-stream@1.6.2",
        "bl@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "bl",
      "version": "1.2.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/bl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-08-28T12:18:44.906258Z",
      "credit": [
        "chalker"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
      "disclosureTime": "2020-08-27T15:16:42Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.2.1",
        "3.0.1",
        "4.0.3",
        "1.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-BL-608877",
      "identifiers": {
        "CVE": [
          "CVE-2020-8244"
        ],
        "CWE": [
          "CWE-9"
        ],
        "GHSA": [
          "GHSA-pp7h-53gx-mx7r"
        ],
        "NSP": [
          "1555"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-04T12:31:03.817670Z",
      "moduleName": "bl",
      "packageManager": "npm",
      "packageName": "bl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-28T12:18:48Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/966347"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.2.1",
          ">=3.0.0 <3.0.1",
          ">=4.0.0 <4.0.3",
          "<1.2.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-tarbz2@4.1.1",
        "decompress-tar@4.1.1",
        "tar-stream@1.6.2",
        "bl@1.2.2"
      ],
      "upgradePath": [
        false,
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-tarbz2@4.1.1",
        "decompress-tar@4.1.1",
        "tar-stream@1.6.2",
        "bl@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "bl",
      "version": "1.2.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/bl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-08-28T12:18:44.906258Z",
      "credit": [
        "chalker"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
      "disclosureTime": "2020-08-27T15:16:42Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.2.1",
        "3.0.1",
        "4.0.3",
        "1.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-BL-608877",
      "identifiers": {
        "CVE": [
          "CVE-2020-8244"
        ],
        "CWE": [
          "CWE-9"
        ],
        "GHSA": [
          "GHSA-pp7h-53gx-mx7r"
        ],
        "NSP": [
          "1555"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-04T12:31:03.817670Z",
      "moduleName": "bl",
      "packageManager": "npm",
      "packageName": "bl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-28T12:18:48Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/966347"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.2.1",
          ">=3.0.0 <3.0.1",
          ">=4.0.0 <4.0.3",
          "<1.2.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-targz@4.1.1",
        "decompress-tar@4.1.1",
        "tar-stream@1.6.2",
        "bl@1.2.2"
      ],
      "upgradePath": [
        false,
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-targz@4.1.1",
        "decompress-tar@4.1.1",
        "tar-stream@1.6.2",
        "bl@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "bl",
      "version": "1.2.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/bl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-08-28T12:18:44.906258Z",
      "credit": [
        "chalker"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
      "disclosureTime": "2020-08-27T15:16:42Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.2.1",
        "3.0.1",
        "4.0.3",
        "1.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-BL-608877",
      "identifiers": {
        "CVE": [
          "CVE-2020-8244"
        ],
        "CWE": [
          "CWE-9"
        ],
        "GHSA": [
          "GHSA-pp7h-53gx-mx7r"
        ],
        "NSP": [
          "1555"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-04T12:31:03.817670Z",
      "moduleName": "bl",
      "packageManager": "npm",
      "packageName": "bl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-28T12:18:48Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/966347"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.2.1",
          ">=3.0.0 <3.0.1",
          ">=4.0.0 <4.0.3",
          "<1.2.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "tar-fs@2.0.0",
        "tar-stream@2.1.0",
        "bl@3.0.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "tar-fs@2.0.0",
        "tar-stream@2.1.0",
        "bl@3.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "bl",
      "version": "3.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar-fs/node_modules/bl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-03-05T17:38:48.014514Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[color-string](https://www.npmjs.org/package/color-string) is a Parser and generator for CSS color strings\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `hwb` regular expression in the `cs.get.hwb` function in index.js. The affected regular expression exhibits quadratic worst-case time complexity.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `color-string` to version 1.5.5 or higher.\n## References\n- [GitHub Additional Information](https://github.com/Qix-/color-string/blob/master/index.js#L153)\n- [Github Commit](https://github.com/Qix-/color-string/commit/0789e21284c33d89ebc4ab4ca6f759b9375ac9d3)\n- [PoC](https://github.com/yetingli/PoCs/blob/main/CVE-2021-29060/Color-String.md)\n",
      "disclosureTime": "2021-03-05T17:36:13Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.5.5"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-COLORSTRING-1082939",
      "identifiers": {
        "CVE": [
          "CVE-2021-29060"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-257v-vj4p-3w2h"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-12T15:08:04.894121Z",
      "moduleName": "color-string",
      "packageManager": "npm",
      "packageName": "color-string",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-12T15:08:05Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/Qix-/color-string/blob/master/index.js%23L153"
        },
        {
          "title": "Github Commit",
          "url": "https://github.com/Qix-/color-string/commit/0789e21284c33d89ebc4ab4ca6f759b9375ac9d3"
        },
        {
          "title": "PoC",
          "url": "https://github.com/yetingli/PoCs/blob/main/CVE-2021-29060/Color-String.md"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.5.5"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "winston@3.2.1",
        "diagnostics@1.1.1",
        "colorspace@1.1.2",
        "color@3.0.0",
        "color-string@1.5.3"
      ],
      "upgradePath": [
        false,
        "winston@3.2.1",
        "diagnostics@1.1.1",
        "colorspace@1.1.2",
        "color@3.0.0",
        "color-string@1.5.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "color-string",
      "version": "1.5.3",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/color-string/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-02-27T10:34:55.291825Z",
      "credit": [
        "Oscar Arnflo"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[decompress](https://www.npmjs.com/package/decompress) is a package that can be used for extracting archives.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nUpgrade `decompress` to version 4.2.1 or higher.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
      "disclosureTime": "2019-10-15T20:29:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.2.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-DECOMPRESS-557358",
      "identifiers": {
        "CVE": [
          "CVE-2020-12265"
        ],
        "CWE": [
          "CWE-29"
        ],
        "GHSA": [
          "GHSA-qgfr-5hqp-vrw9"
        ],
        "NSP": [
          "1217"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:37:03.072953Z",
      "moduleName": "decompress",
      "packageManager": "npm",
      "packageName": "decompress",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-27T13:28:41Z",
      "references": [
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/kevva/decompress/pull/73"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/kevva/decompress/issues/71"
        },
        {
          "title": "GitHub PR decompress-tar",
          "url": "https://github.com/kevva/decompress-tar/pull/12"
        },
        {
          "title": "NPM Advisory",
          "url": "https://www.npmjs.com/advisories/1217"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.2.1"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0"
      ],
      "upgradePath": [
        false,
        "download@7.1.0",
        "decompress@4.2.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "decompress",
      "version": "4.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/decompress/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-02T11:17:35.161853Z",
      "credit": [
        "Oscar Arnflo"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
      "disclosureTime": "2019-10-15T20:29:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports"
          },
          "version": [
            "*"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports"
          },
          "version": [
            "*"
          ]
        }
      ],
      "id": "SNYK-JS-DECOMPRESSTAR-559095",
      "identifiers": {
        "CVE": [
          "CVE-2020-12265"
        ],
        "CWE": [
          "CWE-29"
        ],
        "GHSA": [
          "GHSA-qgfr-5hqp-vrw9"
        ],
        "NSP": [
          "1217"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.633284Z",
      "moduleName": "decompress-tar",
      "packageManager": "npm",
      "packageName": "decompress-tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-27T13:28:41Z",
      "references": [
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/kevva/decompress/pull/73"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/kevva/decompress/issues/71"
        },
        {
          "title": "GitHub PR decompress-tar",
          "url": "https://github.com/kevva/decompress-tar/pull/12"
        },
        {
          "title": "NPM Advisory",
          "url": "https://www.npmjs.com/advisories/1217"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-tar@4.1.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "decompress-tar",
      "version": "4.1.1",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/decompress-tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-02T11:17:35.161853Z",
      "credit": [
        "Oscar Arnflo"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
      "disclosureTime": "2019-10-15T20:29:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports"
          },
          "version": [
            "*"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports"
          },
          "version": [
            "*"
          ]
        }
      ],
      "id": "SNYK-JS-DECOMPRESSTAR-559095",
      "identifiers": {
        "CVE": [
          "CVE-2020-12265"
        ],
        "CWE": [
          "CWE-29"
        ],
        "GHSA": [
          "GHSA-qgfr-5hqp-vrw9"
        ],
        "NSP": [
          "1217"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.633284Z",
      "moduleName": "decompress-tar",
      "packageManager": "npm",
      "packageName": "decompress-tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-27T13:28:41Z",
      "references": [
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/kevva/decompress/pull/73"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/kevva/decompress/issues/71"
        },
        {
          "title": "GitHub PR decompress-tar",
          "url": "https://github.com/kevva/decompress-tar/pull/12"
        },
        {
          "title": "NPM Advisory",
          "url": "https://www.npmjs.com/advisories/1217"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-tarbz2@4.1.1",
        "decompress-tar@4.1.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "decompress-tar",
      "version": "4.1.1",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/decompress-tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-02T11:17:35.161853Z",
      "credit": [
        "Oscar Arnflo"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
      "disclosureTime": "2019-10-15T20:29:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports"
          },
          "version": [
            "*"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports"
          },
          "version": [
            "*"
          ]
        }
      ],
      "id": "SNYK-JS-DECOMPRESSTAR-559095",
      "identifiers": {
        "CVE": [
          "CVE-2020-12265"
        ],
        "CWE": [
          "CWE-29"
        ],
        "GHSA": [
          "GHSA-qgfr-5hqp-vrw9"
        ],
        "NSP": [
          "1217"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.633284Z",
      "moduleName": "decompress-tar",
      "packageManager": "npm",
      "packageName": "decompress-tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-02-27T13:28:41Z",
      "references": [
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/kevva/decompress/pull/73"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/kevva/decompress/issues/71"
        },
        {
          "title": "GitHub PR decompress-tar",
          "url": "https://github.com/kevva/decompress-tar/pull/12"
        },
        {
          "title": "NPM Advisory",
          "url": "https://www.npmjs.com/advisories/1217"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "decompress@4.2.0",
        "decompress-targz@4.1.1",
        "decompress-tar@4.1.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "decompress-tar",
      "version": "4.1.1",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/decompress-tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-01-08T10:58:56.558133Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[engine.io](https://github.com/socketio/engine.io) is a realtime engine behind Socket.IO. It provides the foundation of a bidirectional connection between client and server\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via a POST request to the long polling transport.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `engine.io` to version 4.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b)\n- [PoC](https://github.com/bcaller/kill-engine-io)\n- [Research Blogpost](https://blog.caller.xyz/socketio-engineio-dos/)\n",
      "disclosureTime": "2021-01-08T10:54:39Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-ENGINEIO-1056749",
      "identifiers": {
        "CVE": [
          "CVE-2020-36048"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-01-08T16:03:18.379933Z",
      "moduleName": "engine.io",
      "packageManager": "npm",
      "packageName": "engine.io",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-08T16:03:18.114498Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b"
        },
        {
          "title": "PoC",
          "url": "https://github.com/bcaller/kill-engine-io"
        },
        {
          "title": "Research Blogpost",
          "url": "https://blog.caller.xyz/socketio-engineio-dos/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.0.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0",
        "engine.io@3.4.0"
      ],
      "upgradePath": [
        false,
        "socket.io@3.0.0",
        "engine.io@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "engine.io",
      "version": "3.4.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/engine.io/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2020-07-01T09:33:11.790635Z",
      "credit": [
        "IST Group"
      ],
      "cvssScore": 7.4,
      "description": "## Overview\n[express-jwt](https://www.npmjs.com/package/express-jwt) is a JWT authentication middleware.\n\nAffected versions of this package are vulnerable to Authorization Bypass. The `algorithms` entry to be specified in the configuration is not being enforced. When `algorithms` is not specified in the configuration, with the combination of `jwks-rsa`, it may lead to authorization bypass.\n## Remediation\nUpgrade `express-jwt` to version 6.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/auth0/express-jwt/commit/7ecab5f8f0cab5297c2b863596566eb0c019cdef)\n",
      "disclosureTime": "2020-07-01T09:30:03Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-EXPRESSJWT-575022",
      "identifiers": {
        "CVE": [
          "CVE-2020-15084"
        ],
        "CWE": [
          "CWE-285"
        ],
        "GHSA": [
          "GHSA-6g6m-m6h5-w9gf"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-01T15:32:36.406294Z",
      "moduleName": "express-jwt",
      "packageManager": "npm",
      "packageName": "express-jwt",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-01T15:32:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/auth0/express-jwt/commit/7ecab5f8f0cab5297c2b863596566eb0c019cdef"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3"
      ],
      "upgradePath": [
        false,
        "express-jwt@6.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "express-jwt",
      "version": "0.1.3",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/express-jwt/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2020-12-30T09:23:36.863661Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution. It allows an attacker to cause a denial of service and may lead to remote code execution.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `getobject` to version 1.0.0 or higher.\n## References\n- [GitHub PR](https://github.com/cowboy/node-getobject/pull/5)\n- [Vulnerable Code](https://github.com/cowboy/node-getobject/blob/aba04a8e1d6180eb39eff09990c3a43886ba8937/lib/getobject.js#L48)\n",
      "disclosureTime": "2020-12-30T08:58:12Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-GETOBJECT-1054932",
      "identifiers": {
        "CVE": [
          "CVE-2020-28282"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-12T15:38:18.982417Z",
      "moduleName": "getobject",
      "packageManager": "npm",
      "packageName": "getobject",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-12-30T15:25:18Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/cowboy/node-getobject/pull/5"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/cowboy/node-getobject/blob/aba04a8e1d6180eb39eff09990c3a43886ba8937/lib/getobject.js%23L48"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "getobject@0.1.0"
      ],
      "upgradePath": [
        false,
        "grunt@1.3.0",
        "grunt-legacy-util@2.0.1",
        "getobject@1.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "getobject",
      "version": "0.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/getobject/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H/RL:O",
      "alternativeIds": [],
      "creationTime": "2020-08-07T12:32:32.586036Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.1,
      "description": "## Overview\n[grunt](https://www.npmjs.com/package/grunt) is a JavaScript task runner.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution due to the default usage of the function `load()` instead of its secure replacement `safeLoad()` of the package `js-yaml` inside `grunt.file.readYAML`.\n## Remediation\nUpgrade `grunt` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/gruntjs/grunt/commit/e350cea1724eb3476464561a380fb6a64e61e4e7)\n- [Vulnerable Code](https://github.com/gruntjs/grunt/blob/master/lib/grunt/file.js#L249)\n",
      "disclosureTime": "2020-08-07T12:18:40Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.3.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-GRUNT-597546",
      "identifiers": {
        "CVE": [
          "CVE-2020-7729"
        ],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-m5pj-vjjf-4m3h"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-21T15:25:47.637622Z",
      "moduleName": "grunt",
      "packageManager": "npm",
      "packageName": "grunt",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-08-20T16:03:47Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/gruntjs/grunt/commit/e350cea1724eb3476464561a380fb6a64e61e4e7"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/gruntjs/grunt/blob/master/lib/grunt/file.js%23L249"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4"
      ],
      "upgradePath": [
        false,
        "grunt@1.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "grunt",
      "version": "1.0.4",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/grunt/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-23T16:13:42.109692Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
      "disclosureTime": "2020-11-28T00:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.0.8",
        "2.8.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HOSTEDGITINFO-1088355",
      "identifiers": {
        "CVE": [
          "CVE-2021-23362"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-43f8-2h32-f4cj"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-08T12:53:49.093606Z",
      "moduleName": "hosted-git-info",
      "packageManager": "npm",
      "packageName": "hosted-git-info",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-23T17:13:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=3.0.0 <3.0.8",
          "<2.8.9"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "read-pkg@4.0.1",
        "normalize-package-data@2.5.0",
        "hosted-git-info@2.8.5"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "read-pkg@4.0.1",
        "normalize-package-data@2.5.0",
        "hosted-git-info@2.8.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "hosted-git-info",
      "version": "2.8.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/hosted-git-info/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-23T16:13:42.109692Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
      "disclosureTime": "2020-11-28T00:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.0.8",
        "2.8.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HOSTEDGITINFO-1088355",
      "identifiers": {
        "CVE": [
          "CVE-2021-23362"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-43f8-2h32-f4cj"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-08T12:53:49.093606Z",
      "moduleName": "hosted-git-info",
      "packageManager": "npm",
      "packageName": "hosted-git-info",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-23T17:13:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=3.0.0 <3.0.8",
          "<2.8.9"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "normalize-package-data@2.5.0",
        "hosted-git-info@2.8.5"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "normalize-package-data@2.5.0",
        "hosted-git-info@2.8.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "hosted-git-info",
      "version": "2.8.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/hosted-git-info/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-23T16:13:42.109692Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
      "disclosureTime": "2020-11-28T00:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.0.8",
        "2.8.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HOSTEDGITINFO-1088355",
      "identifiers": {
        "CVE": [
          "CVE-2021-23362"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-43f8-2h32-f4cj"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-08T12:53:49.093606Z",
      "moduleName": "hosted-git-info",
      "packageManager": "npm",
      "packageName": "hosted-git-info",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-23T17:13:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=3.0.0 <3.0.8",
          "<2.8.9"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "read-pkg-up@1.0.1",
        "read-pkg@1.1.0",
        "normalize-package-data@2.5.0",
        "hosted-git-info@2.8.5"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "read-pkg-up@1.0.1",
        "read-pkg@1.1.0",
        "normalize-package-data@2.5.0",
        "hosted-git-info@2.8.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "hosted-git-info",
      "version": "2.8.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/hosted-git-info/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.3.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CVE": [
          "CVE-2020-7788"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-10T18:09:23.069283Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "ini@1.3.5"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ini/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.3.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CVE": [
          "CVE-2020-7788"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-10T18:09:23.069283Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "ini@1.3.5"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ini/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.3.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CVE": [
          "CVE-2020-7788"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-10T18:09:23.069283Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "rc@1.2.8",
        "ini@1.3.5"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "rc@1.2.8",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ini/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.3.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CVE": [
          "CVE-2020-7788"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-10T18:09:23.069283Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "rc@1.2.8",
        "ini@1.3.5"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "rc@1.2.8",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ini/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.3.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CVE": [
          "CVE-2020-7788"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-10T18:09:23.069283Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "resolve-dir@1.0.1",
        "global-modules@1.0.0",
        "global-prefix@1.0.2",
        "ini@1.3.5"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "resolve-dir@1.0.1",
        "global-modules@1.0.0",
        "global-prefix@1.0.2",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ini/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.3.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CVE": [
          "CVE-2020-7788"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-10T18:09:23.069283Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "download@7.1.0",
        "caw@2.0.1",
        "get-proxy@2.1.0",
        "npm-conf@1.1.3",
        "config-chain@1.1.12",
        "ini@1.3.5"
      ],
      "upgradePath": [
        false,
        "download@7.1.0",
        "caw@2.0.1",
        "get-proxy@2.1.0",
        "npm-conf@1.1.3",
        "config-chain@1.1.12",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ini/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2021-11-14T15:11:37.579980Z",
      "credit": [
        "Yoshino-s"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
      "disclosureTime": "2021-11-14T15:05:57Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "identifiers": {
        "CVE": [
          "CVE-2021-3918"
        ],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-14T16:49:43.234923Z",
      "moduleName": "json-schema",
      "packageManager": "npm",
      "packageName": "json-schema",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-14T16:49:43.070251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "request@2.88.0",
        "http-signature@1.2.0",
        "jsprim@1.4.1",
        "json-schema@0.2.3"
      ],
      "upgradePath": [
        false,
        "request@2.88.0",
        "http-signature@1.2.0",
        "jsprim@1.4.2",
        "json-schema@0.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-schema",
      "version": "0.2.3",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/json-schema/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2021-11-14T15:11:37.579980Z",
      "credit": [
        "Yoshino-s"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
      "disclosureTime": "2021-11-14T15:05:57Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "identifiers": {
        "CVE": [
          "CVE-2021-3918"
        ],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-14T16:49:43.234923Z",
      "moduleName": "json-schema",
      "packageManager": "npm",
      "packageName": "json-schema",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-14T16:49:43.070251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "request@2.88.0",
        "http-signature@1.2.0",
        "jsprim@1.4.1",
        "json-schema@0.2.3"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "request@2.88.0",
        "http-signature@1.2.0",
        "jsprim@1.4.2",
        "json-schema@0.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-schema",
      "version": "0.2.3",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/json-schema/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon-node@2.1.1",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon-node@2.1.1",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon-node@2.1.1",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon-node@2.1.1",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon-node@2.1.1",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon-node@2.1.1",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "to-regex@3.0.2",
        "define-property@2.0.2",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-accessor-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-12-16T14:21:14.675101Z",
      "credit": [
        "Feng Xiao"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
      "disclosureTime": "2019-12-16T14:31:14Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "ctorName"
          },
          "version": [
            ">=6.0.0 <6.0.3"
          ]
        }
      ],
      "id": "SNYK-JS-KINDOF-537849",
      "identifiers": {
        "CVE": [
          "CVE-2019-20149"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-6c8f-qphg-qjgp"
        ],
        "NSP": [
          "1490"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:55.567043Z",
      "moduleName": "kind-of",
      "packageManager": "npm",
      "packageName": "kind-of",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-19T14:31:13Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/kind-of/issues/30"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/kind-of/pull/31"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.0.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "define-property@1.0.0",
        "is-descriptor@1.0.2",
        "is-data-descriptor@1.0.0",
        "kind-of@6.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kind-of",
      "version": "6.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/kind-of/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "finale-rest@1.1.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "finale-rest@1.1.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "finale-rest@1.1.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "finale-rest@1.1.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "finale-rest@1.1.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "finale-rest@1.1.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "finale-rest@1.1.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "finale-rest@1.1.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "finale-rest@1.1.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "finale-rest@1.1.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "sequelize@5.21.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "sequelize@5.21.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "sequelize@5.21.3",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "sequelize@5.21.3",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "sequelize@5.21.3",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "portscanner@2.2.0",
        "async@2.6.3",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "winston@3.2.1",
        "async@2.6.3",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-log@2.0.0",
        "grunt-legacy-log-utils@2.0.1",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "async@2.6.3",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "archiver@1.3.0",
        "zip-stream@1.2.0",
        "archiver-utils@1.3.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.16"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.15"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.2",
        "pug-attrs@2.0.4",
        "constantinople@3.1.2",
        "babel-types@6.26.0",
        "lodash@4.17.17"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.15",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-16T16:48:40.985673Z",
      "credit": [
        "Liyuan Chen"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
      "disclosureTime": "2020-10-16T16:47:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1018905",
      "identifiers": {
        "CVE": [
          "CVE-2020-28500"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:41.562106Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
        },
        {
          "title": "GitHub Fix PR",
          "url": "https://github.com/lodash/lodash/pull/5065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-17T14:07:17.048472Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-1040724",
      "identifiers": {
        "CVE": [
          "CVE-2021-23337"
        ],
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-22T09:58:04.543992Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.21"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-06-19T12:04:21.040000Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
      "disclosureTime": "2019-06-19T11:45:02Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.12"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.customDefaultsMerge"
          },
          "version": [
            ">=4.17.3 <4.17.12"
          ]
        }
      ],
      "id": "SNYK-JS-LODASH-450202",
      "identifiers": {
        "CVE": [
          "CVE-2019-10744"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-jf85-cpcp-j695"
        ],
        "NSP": [
          "1065"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-24T08:59:58.227467Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-450202:0",
          "modificationTime": "2019-12-03T11:40:45.719849Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
          ],
          "version": "=4.17.11"
        }
      ],
      "proprietary": true,
      "publicationTime": "2019-07-02T11:45:01Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4348"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4336"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4355"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/sailshq/lodash/pull/1"
        },
        {
          "title": "Node Security Advisory",
          "url": "https://www.npmjs.com/advisories/1065"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.12"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:32:13.683154Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
      "disclosureTime": "2020-04-27T22:14:18Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-567746",
      "identifiers": {
        "CVE": [
          "CVE-2020-8203"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-p6mc-m468-83gw"
        ],
        "NSP": [
          "1523"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-09T08:34:04.944267Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:SNYK-JS-LODASH-567746:0",
          "modificationTime": "2020-04-30T14:28:46.729327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
          ],
          "version": ">=4.14.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:59:14Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/712065"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n- [GitHuub PR](https://github.com/lodash/lodash/pull/4759)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        },
        {
          "title": "GitHuub PR",
          "url": "https://github.com/lodash/lodash/pull/4759"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-21T12:52:58.443440Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-608086",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-27T16:44:20.914177Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.17"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2019-02-03T09:06:37.726000Z",
      "credit": [
        "asgerf"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
      "disclosureTime": "2018-08-31T18:21:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.11"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=0.9.0 <1.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=1.0.0 <1.0.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=1.1.0 <2.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.mergeDefaults"
          },
          "version": [
            ">=4.0.0 <4.17.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.assignMergeValue"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "safeGet"
          },
          "version": [
            ">=4.17.5 <4.17.11"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=0.9.0 <1.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=1.0.0 <1.0.3"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=1.1.0 <2.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.mergeDefaults"
          },
          "version": [
            ">=4.0.0 <4.17.3"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.assignMergeValue"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "safeGet"
          },
          "version": [
            ">=4.17.5 <4.17.11"
          ]
        }
      ],
      "id": "SNYK-JS-LODASH-73638",
      "identifiers": {
        "CVE": [
          "CVE-2018-16487"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-4xc9-xhrj-v574"
        ],
        "NSP": [
          "1066",
          "1068",
          "1071",
          "782"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-24T08:59:09.185738Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2019-02-01T18:21:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4337"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1066"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1068"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1071"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/782"
        },
        {
          "title": "POC: HackerOne Report",
          "url": "https://hackerone.com/reports/380873"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.11"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2019-02-03T09:18:05.060741Z",
      "credit": [
        "cristianstaicu"
      ],
      "cvssScore": 4.4,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
      "disclosureTime": "2017-09-05T09:14:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.11"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "hasUnicodeWord"
          },
          "version": [
            ">=4.15.0 <4.17.11"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "hasUnicodeWord"
          },
          "version": [
            ">=4.15.0 <4.17.11"
          ]
        }
      ],
      "id": "SNYK-JS-LODASH-73639",
      "identifiers": {
        "CVE": [
          "CVE-2019-1010266"
        ],
        "CWE": [
          "CWE-185"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:57.941198Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-05T09:14:22Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4450"
        },
        {
          "title": "POC: GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/3359"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.11"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [
        "SNYK-JS-LODASH-174180"
      ],
      "creationTime": "2018-02-12T22:28:27.654000Z",
      "credit": [
        "Olivier Arteau (HoLyVieR)"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
      "disclosureTime": "2018-01-30T22:28:27Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.17.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "dist/lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">= 1.0.0 <1.0.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=0.9.0 <1.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=1.1.0 <2.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">= 1.0.0 <1.0.3"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "merge"
          },
          "version": [
            ">=0.9.0 <1.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=1.1.0 <2.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.merge"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=3.0.0 <4.0.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMerge"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        },
        {
          "functionId": {
            "filePath": "lodash.js",
            "functionName": "runInContext.baseMergeDeep"
          },
          "version": [
            ">=4.0.0 <4.17.5"
          ]
        }
      ],
      "id": "npm:lodash:20180130",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-LODASH-174180"
        ],
        "CVE": [
          "CVE-2018-3721"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-2m96-9w4j-wgv7",
          "GHSA-46fh-8fc5-xcwx",
          "GHSA-5947-m4fg-xhqg",
          "GHSA-fvqr-27wr-82fm"
        ],
        "NSP": [
          "1067",
          "1069",
          "1070",
          "577"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-08-25T09:41:03.189638Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:lodash:20180130:0",
          "modificationTime": "2019-12-03T11:40:45.883000Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch"
          ],
          "version": "=3.10.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2018-02-14T13:22:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/lodash/lodash/pull/4337"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/310443"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1067"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1069"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1070"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.5"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2",
        "lodash@2.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.7.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "2.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/node_modules/lodash/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-07-19T12:00:32.890460Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash.set](https://www.npmjs.com/package/lodash.set) is a lodash method _.set exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `lodash.set`.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASHSET-1320032",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-12-28T14:47:08.588679Z",
      "moduleName": "lodash.set",
      "packageManager": "npm",
      "packageName": "lodash.set",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-replace-json@0.1.0",
        "lodash.set@4.3.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash.set",
      "version": "4.3.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/lodash.set/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-11-06T09:43:57.923159Z",
      "credit": [
        "Francois Gauthier"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[marsdb](https://github.com/c58/marsdb) is a MarsDB is a lightweight client-side database.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\n## Remediation\nThere is no fixed version for `marsdb`.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1122)\n",
      "disclosureTime": "2019-08-29T17:53:27Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MARSDB-480405",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-5mrr-rgp6-x4gr"
        ],
        "NSP": [
          "1122"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:37:03.740394Z",
      "moduleName": "marsdb",
      "packageManager": "npm",
      "packageName": "marsdb",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-11-06T11:41:52Z",
      "references": [
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1122"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Injection",
      "severityWithCritical": "critical",
      "from": [
        "juice-shop@9.3.1",
        "marsdb@0.6.11"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marsdb",
      "version": "0.6.11",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/marsdb/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "bower-config@1.4.1",
        "optimist@0.6.1",
        "minimist@0.0.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.10",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/optimist/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "bower-config@1.4.1",
        "optimist@0.6.1",
        "minimist@0.0.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.10",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/optimist/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "config@3.2.4",
        "json5@1.0.1",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "config@3.2.4",
        "json5@1.0.1",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "config@3.2.4",
        "json5@1.0.1",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "config@3.2.4",
        "json5@1.0.1",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "rc@1.2.8",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "rc@1.2.8",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "rc@1.2.8",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "i18n@0.8.4",
        "messageformat@2.3.0",
        "make-plural@4.3.0",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "i18n@0.8.4",
        "messageformat@2.3.0",
        "make-plural@4.3.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "i18n@0.8.4",
        "messageformat@2.3.0",
        "make-plural@4.3.0",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "i18n@0.8.4",
        "messageformat@2.3.0",
        "make-plural@4.3.0",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "rc@1.2.8",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "rc@1.2.8",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "rc@1.2.8",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "quote-stream@1.0.2",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "quote-stream@1.0.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "quote-stream@1.0.2",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "quote-stream@1.0.2",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "quote-stream@1.0.2",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "quote-stream@1.0.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "quote-stream@1.0.2",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "quote-stream@1.0.2",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "static-module@2.2.5",
        "quote-stream@1.0.2",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "static-module@2.2.5",
        "quote-stream@1.0.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "static-module@2.2.5",
        "quote-stream@1.0.2",
        "minimist@1.2.0"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "static-module@2.2.5",
        "quote-stream@1.0.2",
        "minimist@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "multer@1.4.2",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "multer@1.4.2",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "multer@1.4.2",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "multer@1.4.2",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "unzipper@0.9.15",
        "fstream@1.0.12",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "unzipper@0.9.15",
        "fstream@1.0.12",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "unzipper@0.9.15",
        "fstream@1.0.12",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "unzipper@0.9.15",
        "fstream@1.0.12",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CVE": [
          "CVE-2021-44906"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T13:30:22.794800Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "tar-fs@2.0.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "tar-fs@2.0.0",
        "mkdirp@0.5.2",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          "1179"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "tar-fs@2.0.0",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "tar-fs@2.0.0",
        "mkdirp@0.5.2",
        "minimist@1.2.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mkdirp/node_modules/minimist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2020-09-30T15:14:09.828066Z",
      "credit": [
        "Alessio Della Libera of Snyk Security Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[mout](https://www.npmjs.com/package/mout) is a Modular Utilities\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `deepFillIn` function can be used to 'fill missing properties recursively', while the `deepMixIn` 'mixes objects into the target object, recursively mixing existing child objects as well'. In both cases, the key used to access the target object recursively is not checked, leading to a Prototype Pollution.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mout` to version 1.2.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/mout/mout/blob/master/src/object/deepFillIn.js)\n- [GitHub Additional Information](https://github.com/mout/mout/blob/master/src/object/deepMixIn.js)\n- [GitHub Fix Commit](https://github.com/mout/mout/commit/bd1821223989e815bc7dac1217bc7859777ce0bf)\n",
      "disclosureTime": "2020-09-30T15:06:58Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/object/deepFillIn.js",
            "functionName": "deepFillIn"
          },
          "version": [
            "*"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/object/deepFillIn.js",
            "functionName": "deepFillIn"
          },
          "version": [
            "*"
          ]
        }
      ],
      "id": "SNYK-JS-MOUT-1014544",
      "identifiers": {
        "CVE": [
          "CVE-2020-7792"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-13T14:49:00.699795Z",
      "moduleName": "mout",
      "packageManager": "npm",
      "packageName": "mout",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-13T15:57:50Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/mout/mout/blob/master/src/object/deepFillIn.js"
        },
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/mout/mout/blob/master/src/object/deepMixIn.js"
        },
        {
          "title": "GitHub Fix Commit",
          "url": "https://github.com/mout/mout/commit/bd1821223989e815bc7dac1217bc7859777ce0bf"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.2.3"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "bower-config@1.4.1",
        "mout@1.2.2"
      ],
      "upgradePath": [
        false,
        "check-dependencies@1.1.0",
        "bower-config@1.4.1",
        "mout@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "mout",
      "version": "1.2.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/mout/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-27T15:00:51.139678Z",
      "credit": [
        "Cristian-Alexandru Staicu",
        "Abdullah Alhamdan"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[notevil](https://www.npmjs.com/package/notevil) is a module uses esprima to parse the javascript AST then walks each node and evaluates the result\r\n**Note:**This package has been deprecated.\n\nAffected versions of this package are vulnerable to Sandbox Bypass. It is vulnerable to Sandbox Escape leading to Prototype pollution. The package fails to restrict access to the main context, allowing an attacker to add or modify an object's prototype.\r\n\r\n**Note:**  This vulnerability derives from an incomplete fix in [SNYK-JS-NOTEVIL-608878](https://security.snyk.io/vuln/SNYK-JS-NOTEVIL-608878).\r\n\r\n## PoC:\r\n```js\r\nvar safeEval = require('notevil')\r\n\r\nsafeEval(`  \r\nObject.defineProperty(({})[[\"__proto__\"]][[\"__proto__\"]], 'polluted', {\r\n  value: 'success'\r\n});`);\r\n\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `notevil`.\n",
      "disclosureTime": "2022-01-27T15:00:48Z",
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-NOTEVIL-2385946",
      "identifiers": {
        "CVE": [
          "CVE-2021-23771"
        ],
        "CWE": [
          "CWE-1321",
          "CWE-265"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-14T16:21:53.865272Z",
      "moduleName": "notevil",
      "packageManager": "npm",
      "packageName": "notevil",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2022-02-14T16:21:53.819915Z",
      "references": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Sandbox Bypass",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "notevil@1.3.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "notevil",
      "version": "1.3.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/notevil/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2020-03-04T15:39:12.029787Z",
      "credit": [
        "posix"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[notevil](https://www.npmjs.com/package/notevil) is a module uses esprima to parse the javascript AST then walks each node and evaluates the result\r\n**Note:**This package has been deprecated.\n\nAffected versions of this package are vulnerable to Prototype Pollution. It is vulnerable to Sandbox Escape leading to Prototype pollution. The package fails to restrict access to the main context, allowing an attacker to add or modify an object's prototype.\r\n\r\nEvaluating the payload ```try{a[b];}catch(e){e.constructor.constructor('return __proto__.arguments.callee.__proto__.polluted=true')()}``` will add the `polluted` property to Function.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `notevil` to version 1.3.3 or higher.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1338)\n",
      "disclosureTime": "2019-11-20T00:11:48Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.3.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-NOTEVIL-559176",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-693"
        ],
        "GHSA": [
          "GHSA-9gxr-rhx6-4jgv"
        ],
        "NSP": [
          "1338"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:37:05.552214Z",
      "moduleName": "notevil",
      "packageManager": "npm",
      "packageName": "notevil",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-03-04T15:39:20Z",
      "references": [
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1338"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.3.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "notevil@1.3.2"
      ],
      "upgradePath": [
        false,
        "notevil@1.3.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "notevil",
      "version": "1.3.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/notevil/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.0.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CVE": [
          "CVE-2021-23343"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-26T10:53:58.992601Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "resolve@1.14.1",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "resolve@1.14.1",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/path-parse/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.0.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CVE": [
          "CVE-2021-23343"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-26T10:53:58.992601Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "read-pkg@4.0.1",
        "normalize-package-data@2.5.0",
        "resolve@1.14.1",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "read-pkg@4.0.1",
        "normalize-package-data@2.5.0",
        "resolve@1.14.1",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/path-parse/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.0.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CVE": [
          "CVE-2021-23343"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-26T10:53:58.992601Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "resolve@1.14.1",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "fontkit@1.8.0",
        "brfs@1.6.1",
        "resolve@1.14.1",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/path-parse/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.0.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CVE": [
          "CVE-2021-23343"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-26T10:53:58.992601Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "resolve@1.14.1",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "pdfkit@0.11.0",
        "linebreak@1.0.2",
        "brfs@2.0.2",
        "resolve@1.14.1",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/path-parse/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.0.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CVE": [
          "CVE-2021-23343"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-26T10:53:58.992601Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "normalize-package-data@2.5.0",
        "resolve@1.14.1",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "normalize-package-data@2.5.0",
        "resolve@1.14.1",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/path-parse/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.0.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CVE": [
          "CVE-2021-23343"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-26T10:53:58.992601Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "read-pkg-up@1.0.1",
        "read-pkg@1.1.0",
        "normalize-package-data@2.5.0",
        "resolve@1.14.1",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "read-pkg-up@1.0.1",
        "read-pkg@1.1.0",
        "normalize-package-data@2.5.0",
        "resolve@1.14.1",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/path-parse/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-10T16:31:21.153382Z",
      "credit": [
        "CykuTW"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[pug](https://www.npmjs.org/package/pug) is an A clean, whitespace-sensitive template language for writing HTML\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). If a remote attacker was able to control the pretty option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.\n## Remediation\nUpgrade `pug` to version 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/pugjs/pug/commit/991e78f7c4220b2f8da042877c6f0ef5a4683be0)\n- [GitHub PR](https://github.com/pugjs/pug/pull/3314)\n- [POC: GitHub Issue](https://github.com/pugjs/pug/issues/3312)\n",
      "disclosureTime": "2021-02-10T16:29:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PUG-1071616",
      "identifiers": {
        "CVE": [
          "CVE-2021-21353"
        ],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-p493-635q-r6gr"
        ],
        "NSP": [
          "1643",
          "1644"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-01T16:46:36.622472Z",
      "moduleName": "pug",
      "packageManager": "npm",
      "packageName": "pug",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-03-01T16:46:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pugjs/pug/commit/991e78f7c4220b2f8da042877c6f0ef5a4683be0"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pugjs/pug/pull/3314"
        },
        {
          "title": "POC: GitHub Issue",
          "url": "https://github.com/pugjs/pug/issues/3312"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Code Execution (RCE)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4"
      ],
      "upgradePath": [
        false,
        "pug@3.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "pug",
      "version": "2.0.4",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/pug/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-03-03T16:57:58.620057Z",
      "credit": [
        "CykuTW"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[pug-code-gen](https://www.npmjs.org/package/pug-code-gen) is a Default code-generator for pug.  It generates HTML via a JavaScript template function.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). If a remote attacker was able to control the pretty option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.\n## Remediation\nUpgrade `pug-code-gen` to version 2.0.3, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/pugjs/pug/commit/991e78f7c4220b2f8da042877c6f0ef5a4683be0)\n- [GitHub PR](https://github.com/pugjs/pug/pull/3314)\n- [POC: GitHub Issue](https://github.com/pugjs/pug/issues/3312)\n",
      "disclosureTime": "2021-02-10T16:29:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.3",
        "3.0.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-PUGCODEGEN-1082232",
      "identifiers": {
        "CVE": [
          "CVE-2021-21353"
        ],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-p493-635q-r6gr"
        ],
        "NSP": [
          "1643",
          "1644"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-03T17:08:11.374289Z",
      "moduleName": "pug-code-gen",
      "packageManager": "npm",
      "packageName": "pug-code-gen",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-03-01T16:46:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pugjs/pug/commit/991e78f7c4220b2f8da042877c6f0ef5a4683be0"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pugjs/pug/pull/3314"
        },
        {
          "title": "POC: GitHub Issue",
          "url": "https://github.com/pugjs/pug/issues/3312"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.3",
          ">=3.0.0 <3.0.2"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Code Execution (RCE)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-code-gen@2.0.2"
      ],
      "upgradePath": [
        false,
        "pug@2.0.4",
        "pug-code-gen@2.0.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "pug-code-gen",
      "version": "2.0.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/pug-code-gen/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:21:52.232749Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Validation Bypass. There is no proper validation of the hostnames set by the `allowedIframeHostnames` option when the `allowIframeRelativeUrls` is set to `true`. This allows attackers to bypass the hostname whitelist for the iframe element.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/460)\n- [POC: Potential Exploit](https://advisory.checkmarx.net/advisory/CX-2021-4309)\n",
      "disclosureTime": "2021-02-09T08:07:33Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.3.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SANITIZEHTML-1070780",
      "identifiers": {
        "CVE": [
          "CVE-2021-26540"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-mjxr-4v3x-q3m4"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-09T16:34:45.899077Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:45.881363Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.3.2"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@2.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:37:16.368073Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. Internationalized domain name (IDN) is not properly handled. This allows attackers to bypass hostname whitelist validation set by the `allowedIframeHostnames` option.\n## Remediation\nUpgrade `sanitize-html` to version 2.3.1 or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/458)\n",
      "disclosureTime": "2021-02-09T08:21:55Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.3.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SANITIZEHTML-1070786",
      "identifiers": {
        "CVE": [
          "CVE-2021-26539"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-rjqq-98f6-6j3r"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-02-09T16:34:49.051805Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:49Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.3.1"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@2.3.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2020-07-17T15:02:43.082824Z",
      "credit": [
        "mikesamuel"
      ],
      "cvssScore": 9.4,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. Tag transformations which turn an attribute value into a text node using `transformTags` could be vulnerable to code execution.\n## Remediation\nUpgrade `sanitize-html` to version 2.0.0-beta or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/156)\n",
      "disclosureTime": "2020-09-07T09:46:18Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0-beta"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SANITIZEHTML-585892",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-07T15:37:06.961614Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-07T09:46:10Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/156"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0-beta"
        ]
      },
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "severityWithCritical": "critical",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-SANITIZEHTML-10048"
      ],
      "creationTime": "2015-11-06T02:09:36.180000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\r\n\r\nSince the sanitize-html module trusts 'text' coming from htmlparser2, and outputs it without further escaping (because htmlparser2 does not decode entities in text before delivering it), this results in an XSS attack vector if sanitize-html ignores the img tag (according to user-configured filter rules) but passes the text intact, as it must do to keep any text in documents.\r\n\r\n\r\n## References\r\n- https://github.com/punkave/sanitize-html/issues/29",
      "disclosureTime": "2015-11-06T02:09:36Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:sanitize-html:20141024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SANITIZEHTML-10048"
        ],
        "CVE": [
          "CVE-2016-1000237"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-3j7m-hmh3-9jmp"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-04-16T09:38:43.588321Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "CVE",
          "url": "https://raw.githubusercontent.com/distributedweaknessfiling/cvelist/master/2016/1000xxx/CVE-2016-1000237.json"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/punkave/sanitize-html/issues/29"
        },
        {
          "title": "Node Security Advisories",
          "url": "https://nodesecurity.io/advisories/135"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.4.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-SANITIZEHTML-10127"
      ],
      "creationTime": "2016-08-02T08:28:08.097000Z",
      "credit": [
        "Björn Kimminich"
      ],
      "cvssScore": 4.7,
      "description": "## Overview\nSanitization of HTML strings is not applied recursively to input, allowing an attacker to potentially inject script and other markup.\n\nSource: _Node Security Project_\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `sanitize-html` to `1.4.3` or later\n\n## References\n- https://github.com/punkave/sanitize-html/issues/29\n- https://github.com/punkave/sanitize-html/commit/762fbc7bba389f3f789cc291c1eb2b64f60f2caf\n\n",
      "disclosureTime": "2016-08-01T18:02:31Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "npm:sanitize-html:20160801",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SANITIZEHTML-10127"
        ],
        "CVE": [],
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          "135"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2018-11-18T11:50:40.402417Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-08-01T18:02:31Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/punkave/sanitize-html/commit/762fbc7bba389f3f789cc291c1eb2b64f60f2caf"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/punkave/sanitize-html/issues/29"
        }
      ],
      "semver": {
        "vulnerable": [
          "<=1.4.2"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.4.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:F/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-SANITIZEHTML-10461"
      ],
      "creationTime": "2017-04-12T10:49:58.283000Z",
      "credit": [
        "Andrew Krasichkov"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[`sanitize-html`](https://www.npmjs.com/package/sanitize-html) is a library for scrubbing html input of malicious values.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) attacks. If at least one `nonTextTags` tag is allowed, a malicious user may potentially conduct an XSS attack.\n\n**PoC:**\n```js\nvar sanitizeHtml = require('sanitize-html');\n\nvar dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!';\nvar clean = sanitizeHtml(dirty, {\n    allowedTags: [ 'textarea' ]\n});\n\nconsole.log(clean);\n\n// !<textarea></textarea><svg/onload=prompt`xs`></textarea>!\n```\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\nUpgrade `sanitize-html` to version 1.11.4 or later.\n\n## References\n- [GitHub Issue](https://github.com/punkave/sanitize-html/issues/100)\n- [GitHub Commit](https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403)\n",
      "disclosureTime": "2016-03-26T23:49:58.283000Z",
      "exploit": "Functional",
      "fixedIn": [
        "1.11.4"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:sanitize-html:20161026",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SANITIZEHTML-10461"
        ],
        "CVE": [
          "CVE-2017-16016"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xc6g-ggrc-qq4r"
        ],
        "NSP": [
          "154"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2019-12-02T14:40:07.352424Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-04-12T11:00:58.283000Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/punkave/sanitize-html/commit/5d205a1005ba0df80e21d8c64a15bb3accdb2403"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/punkave/sanitize-html/issues/100"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.11.4"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sanitize-html@1.4.2"
      ],
      "upgradePath": [
        false,
        "sanitize-html@1.11.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.4.2",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/sanitize-html/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-26T09:25:03.374211Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.8,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure. When getting `Location response` header after fetching a remote url with Cookie, it will follow that url and fetch it with the provided cookie which will be then leaked to the attacker .\n## Remediation\nUpgrade `simple-get` to version 2.8.2, 3.1.1, 4.0.1 or higher.\n## References\n- [Github Commit](https://github.com/feross/simple-get/commit/43c272db3e4b1383cb03d80338dba3e08c451641)\n- [GitHub Commit](https://github.com/feross/simple-get/commit/6eb82c090e30e7146fa5e9ae7212ca16b24b08b4)\n- [GitHub Commit](https://github.com/feross/simple-get/commit/e4af095e06cd69a9235013e8507e220a79b9684f)\n",
      "disclosureTime": "2022-01-26T09:13:34Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.8.2",
        "3.1.1",
        "4.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SIMPLEGET-2361683",
      "identifiers": {
        "CVE": [
          "CVE-2022-0355"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-03T08:12:41.736222Z",
      "moduleName": "simple-get",
      "packageManager": "npm",
      "packageName": "simple-get",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-26T16:17:22Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/feross/simple-get/commit/43c272db3e4b1383cb03d80338dba3e08c451641"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/feross/simple-get/commit/6eb82c090e30e7146fa5e9ae7212ca16b24b08b4"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/feross/simple-get/commit/e4af095e06cd69a9235013e8507e220a79b9684f"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.8.2",
          ">=3.0.0 <3.1.1",
          ">=4.0.0 <4.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "simple-get@3.1.0"
      ],
      "upgradePath": [
        false,
        "grunt-contrib-compress@1.6.0",
        "iltorb@2.4.4",
        "prebuild-install@5.3.3",
        "simple-get@3.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "simple-get",
      "version": "3.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/simple-get/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-30T15:11:27.221896Z",
      "credit": [
        "ni8walk3r"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[socket.io](https://github.com/socketio/socket.io) is a node.js realtime framework server.\n\nAffected versions of this package are vulnerable to Insecure Defaults due to CORS Misconfiguration. All domains are whitelisted by default.\n## Remediation\nUpgrade `socket.io` to version 2.4.0 or higher.\n## References\n- [GitHub Issue](https://github.com/socketio/socket.io/issues/3671)\n- [HackerOne Report](https://hackerone.com/reports/931197)\n",
      "disclosureTime": "2020-10-30T14:01:53Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SOCKETIO-1024859",
      "identifiers": {
        "CVE": [
          "CVE-2020-28481"
        ],
        "CWE": [
          "CWE-453"
        ],
        "GHSA": [
          "GHSA-fxwf-4rqh-v8g3"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-01-07T16:40:36.503041Z",
      "moduleName": "socket.io",
      "packageManager": "npm",
      "packageName": "socket.io",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:36Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/socketio/socket.io/issues/3671"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/931197"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.4.0"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Insecure Defaults",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0"
      ],
      "upgradePath": [
        false,
        "socket.io@2.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "socket.io",
      "version": "2.3.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/socket.io/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-01-08T11:00:31.327189Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[socket.io-parser](https://www.npmjs.org/package/socket.io-parser) is a socket.io protocol parser\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via a large packet because a concatenation approach is used.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `socket.io-parser` to version 3.3.2, 3.4.1 or higher.\n## References\n- [GitHub Commit](https://github.com/socketio/socket.io-parser/commit/dcb942d24db97162ad16a67c2a0cf30875342d55)\n- [PoC](https://github.com/bcaller/kill-engine-io)\n- [Research Blogpost](https://blog.caller.xyz/socketio-engineio-dos/)\n",
      "disclosureTime": "2021-01-08T10:59:22Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.3.2",
        "3.4.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SOCKETIOPARSER-1056752",
      "identifiers": {
        "CVE": [
          "CVE-2020-36049"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-xfhh-g9f5-x4m4"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-01-10T14:09:25.619089Z",
      "moduleName": "socket.io-parser",
      "packageManager": "npm",
      "packageName": "socket.io-parser",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-08T16:03:18Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/socketio/socket.io-parser/commit/dcb942d24db97162ad16a67c2a0cf30875342d55"
        },
        {
          "title": "PoC",
          "url": "https://github.com/bcaller/kill-engine-io"
        },
        {
          "title": "Research Blogpost",
          "url": "https://blog.caller.xyz/socketio-engineio-dos/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.3.2",
          ">3.4.0 <3.4.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0",
        "socket.io-client@2.3.0",
        "socket.io-parser@3.3.0"
      ],
      "upgradePath": [
        false,
        "socket.io@2.3.0",
        "socket.io-client@2.3.0",
        "socket.io-parser@3.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "socket.io-parser",
      "version": "3.3.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/socket.io-client/node_modules/socket.io-parser/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-12-10T12:47:49.133511Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\n[swagger-ui-dist](https://www.npmjs.com/package/swagger-ui-dist) is a module that exposes Swagger-UI's entire dist folder as a dependency-free npm module. Use swagger-ui instead, if you'd like to have npm install dependencies for you.\n\nAffected versions of this package are vulnerable to User Interface (UI) Misrepresentation of Critical Information via the `?url` parameter, which was intended to allow displaying remote OpenAPI definitions. This functionality may pose a risk for users who host their own SwaggerUI instances. In particular, including remote OpenAPI definitions opens a vector for phishing attacks by abusing the trusted names/domains of self-hosted instances.\n## Remediation\nUpgrade `swagger-ui-dist` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/swagger-api/swagger-ui/commit/01a3e55960f864a0acf6a8d06e5ddaf6776a7f76)\n- [GitHub Issue](https://github.com/swagger-api/swagger-ui/issues/4872)\n",
      "disclosureTime": "2021-12-09T19:08:38Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.1.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SWAGGERUIDIST-2314884",
      "identifiers": {
        "CVE": [
          "CVE-2018-25031",
          "CVE-2021-46708"
        ],
        "CWE": [
          "CWE-451"
        ],
        "GHSA": [
          "GHSA-qrmm-w75w-3wpx"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T10:44:14.173594Z",
      "moduleName": "swagger-ui-dist",
      "packageManager": "npm",
      "packageName": "swagger-ui-dist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-12-10T16:45:52Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/swagger-api/swagger-ui/commit/01a3e55960f864a0acf6a8d06e5ddaf6776a7f76"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/swagger-api/swagger-ui/issues/4872"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.1.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "User Interface (UI) Misrepresentation of Critical Information",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "swagger-ui-express@4.1.2",
        "swagger-ui-dist@3.24.3"
      ],
      "upgradePath": [
        false,
        "swagger-ui-express@4.2.0",
        "swagger-ui-dist@4.1.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "swagger-ui-dist",
      "version": "3.24.3",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/swagger-ui-dist/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2021-08-04T06:32:44.747650Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient symlink protection.\r\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting tar files that contain both a directory and a symlink with the same name as the directory. This order of operations results in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to `mkdir` for that directory are skipped.\r\nHowever, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 3.2.3, 4.4.15, 5.0.7, 6.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20)\n",
      "disclosureTime": "2021-08-04T06:13:39Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.3",
        "4.4.15",
        "5.0.7",
        "6.1.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536528",
      "identifiers": {
        "CVE": [
          "CVE-2021-32803"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-r628-mhmh-qjhw"
        ],
        "NSP": [
          "1771"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-04T07:24:53.457127Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-04T07:24:54.942553Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.3",
          ">=4.0.0 <4.4.15",
          ">=5.0.0 <5.0.7",
          ">=6.0.0 <6.1.2"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Overwrite",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2021-08-04T06:40:36.725155Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient absolute path sanitization.\r\n\r\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example, the path `/home/user/.bashrc` would turn into `home/user/.bashrc`.\r\n\r\nThis logic is insufficient when file paths contain repeated path roots such as `////home/user/.bashrc`. `node-tar` only strips a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) still resolves to an absolute path.\n## Remediation\nUpgrade `tar` to version 3.2.2, 4.4.14, 5.0.6, 6.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4)\n",
      "disclosureTime": "2021-08-04T06:33:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.2",
        "4.4.14",
        "5.0.6",
        "6.1.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536531",
      "identifiers": {
        "CVE": [
          "CVE-2021-32804"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-3jfq-g458-7qm9"
        ],
        "NSP": [
          "1770"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-04T07:24:55.395728Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-04T07:24:55.599985Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.4.14",
          ">=5.0.0 <5.0.6",
          ">=6.0.0 <6.1.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Overwrite",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.14"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-08-05T12:41:27.304655Z",
      "credit": [
        "@isaacs"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). When stripping the trailing slash from `files` arguments, the  `f.replace(/\\/+$/, '')` performance of this function can exponentially degrade when `f` contains many `/` characters resulting in ReDoS. \r\n\r\nThis vulnerability is not likely to be exploitable as it requires that the untrusted input is being passed into the `tar.extract()` or `tar.list()` array of entries to parse/extract, which would be unusual.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tar` to version 6.1.4, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf)\n",
      "disclosureTime": "2021-08-05T12:38:55Z",
      "exploit": "Unproven",
      "fixedIn": [
        "6.1.4",
        "5.0.8",
        "4.4.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536758",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-11T12:03:25.691359Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-05T14:33:10Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.4",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T05:55:13.724747Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic was insufficient when extracting `tar` files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators. However, `\\` is a valid filename character on posix systems.\r\n\r\nBy first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location. This can lead to extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\r\n\r\nAdditionally, a similar confusion could arise on case-insensitive filesystems. If a `tar` archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but not from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created.\n## Remediation\nUpgrade `tar` to version 6.1.7, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728)\n",
      "disclosureTime": "2021-09-01T05:45:02Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.7",
        "5.0.8",
        "4.4.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579147",
      "identifiers": {
        "CVE": [
          "CVE-2021-37701"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-9r2w-394v-53qc"
        ],
        "NSP": [
          "1779"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:12.792736Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:13.009873Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.7",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T06:04:41.432860Z",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting `tar` files that contain two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts.\r\nA specially crafted `tar` archive can include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. This leads to bypassing `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location and extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455)\n",
      "disclosureTime": "2021-09-01T05:57:49Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579152",
      "identifiers": {
        "CVE": [
          "CVE-2021-37712"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-qq89-hq3f-393p"
        ],
        "NSP": [
          "1780"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:12.153496Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:12.359155Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T06:09:32.775270Z",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\r\n\r\nThis logic is insufficient on Windows systems when extracting `tar` files that contain a path that is not an absolute path, but specify a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` resolves against the current working directory on the `C:` drive, rather than the extraction target directory.\r\n\r\nAdditionally, a `..` portion of the path can occur immediately after the drive letter, such as `C:../foo`, and is not properly sanitized by the logic that checks for `..` within the normalized and split portions of the path.\r\n\r\n**Note:** This only affects users of `node-tar` on Windows systems.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598)\n",
      "disclosureTime": "2021-09-01T06:05:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579155",
      "identifiers": {
        "CVE": [
          "CVE-2021-37713"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-5955-9wpr-37jh"
        ],
        "NSP": [
          "1781"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:11.496417Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:11.707292Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "node-pre-gyp@0.14.0",
        "tar@4.4.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2021-08-04T06:32:44.747650Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient symlink protection.\r\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting tar files that contain both a directory and a symlink with the same name as the directory. This order of operations results in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to `mkdir` for that directory are skipped.\r\nHowever, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 3.2.3, 4.4.15, 5.0.7, 6.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20)\n",
      "disclosureTime": "2021-08-04T06:13:39Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.3",
        "4.4.15",
        "5.0.7",
        "6.1.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536528",
      "identifiers": {
        "CVE": [
          "CVE-2021-32803"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-r628-mhmh-qjhw"
        ],
        "NSP": [
          "1771"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-04T07:24:53.457127Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-04T07:24:54.942553Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.3",
          ">=4.0.0 <4.4.15",
          ">=5.0.0 <5.0.7",
          ">=6.0.0 <6.1.2"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Overwrite",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2021-08-04T06:40:36.725155Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient absolute path sanitization.\r\n\r\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example, the path `/home/user/.bashrc` would turn into `home/user/.bashrc`.\r\n\r\nThis logic is insufficient when file paths contain repeated path roots such as `////home/user/.bashrc`. `node-tar` only strips a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) still resolves to an absolute path.\n## Remediation\nUpgrade `tar` to version 3.2.2, 4.4.14, 5.0.6, 6.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4)\n",
      "disclosureTime": "2021-08-04T06:33:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.2",
        "4.4.14",
        "5.0.6",
        "6.1.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536531",
      "identifiers": {
        "CVE": [
          "CVE-2021-32804"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-3jfq-g458-7qm9"
        ],
        "NSP": [
          "1770"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-04T07:24:55.395728Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-04T07:24:55.599985Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.4.14",
          ">=5.0.0 <5.0.6",
          ">=6.0.0 <6.1.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Overwrite",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.14"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-08-05T12:41:27.304655Z",
      "credit": [
        "@isaacs"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). When stripping the trailing slash from `files` arguments, the  `f.replace(/\\/+$/, '')` performance of this function can exponentially degrade when `f` contains many `/` characters resulting in ReDoS. \r\n\r\nThis vulnerability is not likely to be exploitable as it requires that the untrusted input is being passed into the `tar.extract()` or `tar.list()` array of entries to parse/extract, which would be unusual.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tar` to version 6.1.4, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf)\n",
      "disclosureTime": "2021-08-05T12:38:55Z",
      "exploit": "Unproven",
      "fixedIn": [
        "6.1.4",
        "5.0.8",
        "4.4.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536758",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-11T12:03:25.691359Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-05T14:33:10Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.4",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T05:55:13.724747Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic was insufficient when extracting `tar` files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators. However, `\\` is a valid filename character on posix systems.\r\n\r\nBy first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location. This can lead to extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\r\n\r\nAdditionally, a similar confusion could arise on case-insensitive filesystems. If a `tar` archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but not from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created.\n## Remediation\nUpgrade `tar` to version 6.1.7, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728)\n",
      "disclosureTime": "2021-09-01T05:45:02Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.7",
        "5.0.8",
        "4.4.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579147",
      "identifiers": {
        "CVE": [
          "CVE-2021-37701"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-9r2w-394v-53qc"
        ],
        "NSP": [
          "1779"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:12.792736Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:13.009873Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.7",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T06:04:41.432860Z",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting `tar` files that contain two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts.\r\nA specially crafted `tar` archive can include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. This leads to bypassing `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location and extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455)\n",
      "disclosureTime": "2021-09-01T05:57:49Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579152",
      "identifiers": {
        "CVE": [
          "CVE-2021-37712"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-qq89-hq3f-393p"
        ],
        "NSP": [
          "1780"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:12.153496Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:12.359155Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T06:09:32.775270Z",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\r\n\r\nThis logic is insufficient on Windows systems when extracting `tar` files that contain a path that is not an absolute path, but specify a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` resolves against the current working directory on the `C:` drive, rather than the extraction target directory.\r\n\r\nAdditionally, a `..` portion of the path can occur immediately after the drive letter, such as `C:../foo`, and is not properly sanitized by the logic that checks for `..` within the normalized and split portions of the path.\r\n\r\n**Note:** This only affects users of `node-tar` on Windows systems.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598)\n",
      "disclosureTime": "2021-09-01T06:05:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579155",
      "identifiers": {
        "CVE": [
          "CVE-2021-37713"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-5955-9wpr-37jh"
        ],
        "NSP": [
          "1781"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:11.496417Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:11.707292Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "libxmljs2@0.22.0",
        "node-pre-gyp@0.14.0",
        "tar@4.4.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2021-08-04T06:32:44.747650Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient symlink protection.\r\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting tar files that contain both a directory and a symlink with the same name as the directory. This order of operations results in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to `mkdir` for that directory are skipped.\r\nHowever, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 3.2.3, 4.4.15, 5.0.7, 6.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20)\n",
      "disclosureTime": "2021-08-04T06:13:39Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.3",
        "4.4.15",
        "5.0.7",
        "6.1.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536528",
      "identifiers": {
        "CVE": [
          "CVE-2021-32803"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-r628-mhmh-qjhw"
        ],
        "NSP": [
          "1771"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-04T07:24:53.457127Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-04T07:24:54.942553Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.3",
          ">=4.0.0 <4.4.15",
          ">=5.0.0 <5.0.7",
          ">=6.0.0 <6.1.2"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Overwrite",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2021-08-04T06:40:36.725155Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.2,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient absolute path sanitization.\r\n\r\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example, the path `/home/user/.bashrc` would turn into `home/user/.bashrc`.\r\n\r\nThis logic is insufficient when file paths contain repeated path roots such as `////home/user/.bashrc`. `node-tar` only strips a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) still resolves to an absolute path.\n## Remediation\nUpgrade `tar` to version 3.2.2, 4.4.14, 5.0.6, 6.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4)\n",
      "disclosureTime": "2021-08-04T06:33:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.2",
        "4.4.14",
        "5.0.6",
        "6.1.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536531",
      "identifiers": {
        "CVE": [
          "CVE-2021-32804"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-3jfq-g458-7qm9"
        ],
        "NSP": [
          "1770"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-04T07:24:55.395728Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-04T07:24:55.599985Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.4.14",
          ">=5.0.0 <5.0.6",
          ">=6.0.0 <6.1.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Overwrite",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.14"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-08-05T12:41:27.304655Z",
      "credit": [
        "@isaacs"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). When stripping the trailing slash from `files` arguments, the  `f.replace(/\\/+$/, '')` performance of this function can exponentially degrade when `f` contains many `/` characters resulting in ReDoS. \r\n\r\nThis vulnerability is not likely to be exploitable as it requires that the untrusted input is being passed into the `tar.extract()` or `tar.list()` array of entries to parse/extract, which would be unusual.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tar` to version 6.1.4, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf)\n",
      "disclosureTime": "2021-08-05T12:38:55Z",
      "exploit": "Unproven",
      "fixedIn": [
        "6.1.4",
        "5.0.8",
        "4.4.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1536758",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-11T12:03:25.691359Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-08-05T14:33:10Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.4",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T05:55:13.724747Z",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic was insufficient when extracting `tar` files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators. However, `\\` is a valid filename character on posix systems.\r\n\r\nBy first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location. This can lead to extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\r\n\r\nAdditionally, a similar confusion could arise on case-insensitive filesystems. If a `tar` archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but not from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created.\n## Remediation\nUpgrade `tar` to version 6.1.7, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728)\n",
      "disclosureTime": "2021-09-01T05:45:02Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.7",
        "5.0.8",
        "4.4.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579147",
      "identifiers": {
        "CVE": [
          "CVE-2021-37701"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-9r2w-394v-53qc"
        ],
        "NSP": [
          "1779"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:12.792736Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:13.009873Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.7",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.16"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T06:04:41.432860Z",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting `tar` files that contain two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts.\r\nA specially crafted `tar` archive can include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. This leads to bypassing `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location and extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455)\n",
      "disclosureTime": "2021-09-01T05:57:49Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579152",
      "identifiers": {
        "CVE": [
          "CVE-2021-37712"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-qq89-hq3f-393p"
        ],
        "NSP": [
          "1780"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:12.153496Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:12.359155Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-01T06:09:32.775270Z",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "cvssScore": 8.5,
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\r\n\r\nThis logic is insufficient on Windows systems when extracting `tar` files that contain a path that is not an absolute path, but specify a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` resolves against the current working directory on the `C:` drive, rather than the extraction target directory.\r\n\r\nAdditionally, a `..` portion of the path can occur immediately after the drive letter, such as `C:../foo`, and is not properly sanitized by the logic that checks for `..` within the normalized and split portions of the path.\r\n\r\n**Note:** This only affects users of `node-tar` on Windows systems.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598)\n",
      "disclosureTime": "2021-09-01T06:05:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TAR-1579155",
      "identifiers": {
        "CVE": [
          "CVE-2021-37713"
        ],
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-5955-9wpr-37jh"
        ],
        "NSP": [
          "1781"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-01T07:55:11.496417Z",
      "moduleName": "tar",
      "packageManager": "npm",
      "packageName": "tar",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T07:55:11.707292Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary File Write",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.13"
      ],
      "upgradePath": [
        false,
        "sqlite3@4.1.1",
        "node-pre-gyp@0.11.0",
        "tar@4.4.18"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tar",
      "version": "4.4.13",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/tar/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2021-05-30T12:45:07.317218Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[trim-newlines](https://www.npmjs.org/package/trim-newlines) is a Trim newlines from the start and/or end of a string\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the `end()` method.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `trim-newlines` to version 3.0.1, 4.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91)\n- [GitHub Release](https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1)\n",
      "disclosureTime": "2021-05-30T12:41:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.0.1",
        "4.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TRIMNEWLINES-1298042",
      "identifiers": {
        "CVE": [
          "CVE-2021-33623"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-7p7h-4mm5-852v"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-30T13:11:03.433323Z",
      "moduleName": "trim-newlines",
      "packageManager": "npm",
      "packageName": "trim-newlines",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:03.409185Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.0.1",
          ">=4.0.0 <4.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "dateformat@1.0.12",
        "meow@3.7.0",
        "trim-newlines@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "trim-newlines",
      "version": "1.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/trim-newlines/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-30T14:25:50.130236Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
      "disclosureTime": "2021-09-30T14:22:21Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.14.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-UGLIFYJS-1727251",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1333"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-09T18:42:15.332622Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-09T18:42:15.313328Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/mishoo/UglifyJS/issues/5133"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/mishoo/UglifyJS/pull/5134"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/mishoo/UglifyJS/pull/5135"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.14.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "pug@2.0.4",
        "pug-filters@3.1.1",
        "uglify-js@2.8.29"
      ],
      "upgradePath": [
        false,
        "pug@3.0.0",
        "pug-filters@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "uglify-js",
      "version": "2.8.29",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/uglify-js/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:37.914118Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/unset-value/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:37.914118Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/unset-value/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:37.914118Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/unset-value/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:37.914118Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "nanomatch@1.2.13",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/unset-value/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1321"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:37.914118Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "check-dependencies@1.1.0",
        "findup-sync@2.0.0",
        "micromatch@3.1.10",
        "extglob@2.0.4",
        "expand-brackets@2.1.4",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/unset-value/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T12:57:03.048070Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isSlug` function\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"111\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"a\"\r\n\t}\r\n\r\n\treturn ret+\"_\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isSlug(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Commit](https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7#diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311)\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1596)\n- [GitHubPR - Actual fix](https://github.com/validatorjs/validator.js/pull/1738)\n- [GitHub PR - Initial fix](https://github.com/validatorjs/validator.js/pull/1603)\n",
      "disclosureTime": "2021-04-05T12:54:38Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "13.6.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-VALIDATOR-1090599",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-26T16:18:45.603232Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7%23diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1596"
        },
        {
          "title": "GitHubPR - Actual fix",
          "url": "https://github.com/validatorjs/validator.js/pull/1738"
        },
        {
          "title": "GitHub PR - Initial fix",
          "url": "https://github.com/validatorjs/validator.js/pull/1603"
        }
      ],
      "semver": {
        "vulnerable": [
          "<13.6.0"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "validator@10.11.0"
      ],
      "upgradePath": [
        false,
        "sequelize@5.22.5",
        "validator@13.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "10.11.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/validator/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T12:59:35.520598Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rtrim` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.rtrim(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1599)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1603)\n- [GitHub PR #2](https://github.com/validatorjs/validator.js/pull/1738)\n",
      "disclosureTime": "2021-04-05T12:43:44Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "13.7.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-VALIDATOR-1090600",
      "identifiers": {
        "CVE": [
          "CVE-2021-3765"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-04T13:35:41.043684Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:44Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1599"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/validatorjs/validator.js/pull/1603"
        },
        {
          "title": "GitHub PR #2",
          "url": "https://github.com/validatorjs/validator.js/pull/1738"
        }
      ],
      "semver": {
        "vulnerable": [
          "<13.7.0"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "validator@10.11.0"
      ],
      "upgradePath": [
        false,
        "sequelize@5.22.5",
        "validator@13.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "10.11.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/validator/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T13:13:17.588279Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isHSL` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"hsla(0\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isHSL(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1598)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
      "disclosureTime": "2021-04-05T13:11:19Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "13.6.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-VALIDATOR-1090601",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-26T16:18:43.483071Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:43.450928Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1598"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/validatorjs/validator.js/pull/1651"
        }
      ],
      "semver": {
        "vulnerable": [
          "<13.6.0"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "validator@10.11.0"
      ],
      "upgradePath": [
        false,
        "sequelize@5.22.5",
        "validator@13.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "10.11.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/validator/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T13:15:56.238780Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isEmail` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"<\"\r\n\t}\r\n\r\n\treturn ret+\"\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        validator.isEmail(attack_str,{ allow_display_name: true })\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1597)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
      "disclosureTime": "2021-04-05T13:14:43Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "13.6.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-VALIDATOR-1090602",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-26T16:18:43.024933Z",
      "moduleName": "validator",
      "packageManager": "npm",
      "packageName": "validator",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:42.989822Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/validatorjs/validator.js/issues/1597"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/validatorjs/validator.js/pull/1651"
        }
      ],
      "semver": {
        "vulnerable": [
          "<13.6.0"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "sequelize@5.21.3",
        "validator@10.11.0"
      ],
      "upgradePath": [
        false,
        "sequelize@5.22.5",
        "validator@13.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "validator",
      "version": "10.11.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/validator/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CVE": [
          "CVE-2021-32640"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-09T13:15:00.554755Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0",
        "engine.io@3.4.0",
        "ws@7.2.1"
      ],
      "upgradePath": [
        false,
        "socket.io@2.3.0",
        "engine.io@3.4.0",
        "ws@7.4.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "7.2.1",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/ws/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CVE": [
          "CVE-2021-32640"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-09T13:15:00.554755Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0",
        "socket.io-client@2.3.0",
        "engine.io-client@3.4.0",
        "ws@6.1.4"
      ],
      "upgradePath": [
        false,
        "socket.io@2.4.0",
        "socket.io-client@2.4.0",
        "engine.io-client@3.5.0",
        "ws@7.4.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "6.1.4",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/engine.io-client/node_modules/ws/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-05T17:08:00.715590Z",
      "credit": [
        "rinsuki"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[xmlhttprequest-ssl](https://github.com/mjwwit/node-XMLHttpRequest) is a fork of `xmlhttprequest`.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. Provided requests are sent synchronously (`async=False` on `xhr.open`), malicious user input flowing into `xhr.send` could result in arbitrary code being injected and run.\r\n\r\n### POC\r\n```\r\nconst { XMLHttpRequest } = require(\"xmlhttprequest\")\r\n\r\nconst xhr = new XMLHttpRequest()\r\nxhr.open(\"POST\", \"http://localhost.invalid/\", false /* use synchronize request */)\r\nxhr.send(\"\\\\');require(\\\"fs\\\").writeFileSync(\\\"/tmp/aaaaa.txt\\\", \\\"poc-20210306\\\");req.end();//\")\r\n```\n## Remediation\nUpgrade `xmlhttprequest-ssl` to version 1.6.2 or higher.\n## References\n- [GitHub Commit #1](https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6)\n- [GitHub Commit #2](https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291)\n- [Vulnerable Code](https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480)\n",
      "disclosureTime": "2021-03-05T17:05:16Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.6.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-XMLHTTPREQUESTSSL-1082936",
      "identifiers": {
        "CVE": [
          "CVE-2020-28502"
        ],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-h4j5-c7cj-74xg"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-04T13:03:32.352549Z",
      "moduleName": "xmlhttprequest-ssl",
      "packageManager": "npm",
      "packageName": "xmlhttprequest-ssl",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-05T17:15:16Z",
      "references": [
        {
          "title": "GitHub Commit #1",
          "url": "https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6"
        },
        {
          "title": "GitHub Commit #2",
          "url": "https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.6.2"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Injection",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0",
        "socket.io-client@2.3.0",
        "engine.io-client@3.4.0",
        "xmlhttprequest-ssl@1.5.5"
      ],
      "upgradePath": [
        false,
        "socket.io@2.4.0",
        "socket.io-client@2.4.0",
        "engine.io-client@3.5.2",
        "xmlhttprequest-ssl@1.6.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "xmlhttprequest-ssl",
      "version": "1.5.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/xmlhttprequest-ssl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:44:40.787452Z",
      "credit": [
        "Wes Garland"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[xmlhttprequest-ssl](https://github.com/mjwwit/node-XMLHttpRequest) is a fork of `xmlhttprequest`.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. The package disables SSL certificate validation by default, because `rejectUnauthorized` (when the property exists but is undefined) is considered to be false within the `https.request` function of Node.js. In other words, no certificate is ever rejected.\r\n\r\n\r\n## PoC\r\n```\r\nconst XMLHttpRequest = require('xmlhttprequest-ssl');\r\n\r\nvar xhr = new XMLHttpRequest();\t\t/* pass empty object in version 1.5.4 to work around bug */\r\n\r\nxhr.open(\"GET\", \"https://self-signed.badssl.com/\");\r\nxhr.addEventListener('readystatechange', () => console.log('ready state:', xhr.status));\r\nxhr.addEventListener('loadend', loadend);\r\n\r\nfunction loadend()\r\n{\r\n  console.log('loadend:', xhr);\r\n  if (xhr.status === 0 && xhr.statusText.code === 'DEPTH_ZERO_SELF_SIGNED_CERT')\r\n    console.log('test passed: self-signed cert rejected');\r\n  else\r\n    console.log('*** test failed: self-signed cert used to retrieve content');\r\n}\r\n\r\nxhr.send();\r\n```\n## Remediation\nUpgrade `xmlhttprequest-ssl` to version 1.6.1 or higher.\n## References\n- [GitHub Commit](https://github.com/mjwwit/node-XMLHttpRequest/commit/bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2)\n- [GitHub Diff](https://github.com/mjwwit/node-XMLHttpRequest/compare/v1.6.0...1.6.1)\n- [PoC](https://people.kingsds.network/wesgarland/xmlhttprequest-ssl-vuln.txt)\n",
      "disclosureTime": "2021-04-21T23:00:00Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.6.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-XMLHTTPREQUESTSSL-1255647",
      "identifiers": {
        "CVE": [
          "CVE-2021-31597"
        ],
        "CWE": [
          "CWE-284"
        ],
        "GHSA": [
          "GHSA-72mh-269x-7mh5"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-04-26T16:18:41.332231Z",
      "moduleName": "xmlhttprequest-ssl",
      "packageManager": "npm",
      "packageName": "xmlhttprequest-ssl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-04-26T16:18:41.311169Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mjwwit/node-XMLHttpRequest/commit/bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2"
        },
        {
          "title": "GitHub Diff",
          "url": "https://github.com/mjwwit/node-XMLHttpRequest/compare/v1.6.0...1.6.1"
        },
        {
          "title": "PoC",
          "url": "https://people.kingsds.network/wesgarland/xmlhttprequest-ssl-vuln.txt"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.6.1"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "socket.io@2.3.0",
        "socket.io-client@2.3.0",
        "engine.io-client@3.4.0",
        "xmlhttprequest-ssl@1.5.5"
      ],
      "upgradePath": [
        false,
        "socket.io@2.4.0",
        "socket.io-client@2.4.0",
        "engine.io-client@3.5.2",
        "xmlhttprequest-ssl@1.6.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "xmlhttprequest-ssl",
      "version": "1.5.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/xmlhttprequest-ssl/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-25T14:27:16.715665Z",
      "credit": [
        "po6ix"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
      "disclosureTime": "2020-10-25T14:24:22Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.2.2",
        "4.0.1",
        "5.0.5"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-Y18N-1021887",
      "identifiers": {
        "CVE": [
          "CVE-2020-7774"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-c4w7-xm78-47vh"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-01-05T15:29:00.943111Z",
      "moduleName": "y18n",
      "packageManager": "npm",
      "packageName": "y18n",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-10T15:27:28Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/yargs/y18n/issues/96"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/yargs/y18n/pull/108"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.0.1",
          ">=5.0.0 <5.0.5"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "y18n@4.0.0"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "y18n@4.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "y18n",
      "version": "4.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/y18n/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-25T14:27:16.715665Z",
      "credit": [
        "po6ix"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
      "disclosureTime": "2020-10-25T14:24:22Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.2.2",
        "4.0.1",
        "5.0.5"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-Y18N-1021887",
      "identifiers": {
        "CVE": [
          "CVE-2020-7774"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-c4w7-xm78-47vh"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-01-05T15:29:00.943111Z",
      "moduleName": "y18n",
      "packageManager": "npm",
      "packageName": "y18n",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-10T15:27:28Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/yargs/y18n/issues/96"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/yargs/y18n/pull/108"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.0.1",
          ">=5.0.0 <5.0.5"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "replace@1.1.1",
        "yargs@12.0.5",
        "y18n@4.0.0"
      ],
      "upgradePath": [
        false,
        "replace@1.1.1",
        "yargs@12.0.5",
        "y18n@4.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "y18n",
      "version": "4.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/y18n/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-16T16:41:36.590728Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-16T16:35:35Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "5.0.1",
        "13.1.2",
        "15.0.1",
        "18.1.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        }
      ],
      "id": "SNYK-JS-YARGSPARSER-560381",
      "identifiers": {
        "CVE": [
          "CVE-2020-7608"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-05T15:49:41.076779Z",
      "moduleName": "yargs-parser",
      "packageManager": "npm",
      "packageName": "yargs-parser",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-16T16:35:33Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832"
        },
        {
          "title": "GitHub Fix Commit",
          "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          ">5.0.0-security.0 <5.0.1",
          ">=6.0.0 <13.1.2",
          ">=14.0.0 <15.0.1",
          ">=16.0.0 <18.1.1"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "yargs-parser@13.1.1"
      ],
      "upgradePath": [
        false,
        "concurrently@5.0.2",
        "yargs@13.3.0",
        "yargs-parser@13.1.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "yargs-parser",
      "version": "13.1.1",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/yargs-parser/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-16T16:41:36.590728Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-16T16:35:35Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "5.0.1",
        "13.1.2",
        "15.0.1",
        "18.1.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse.setKey"
          },
          "version": [
            "<13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        }
      ],
      "id": "SNYK-JS-YARGSPARSER-560381",
      "identifiers": {
        "CVE": [
          "CVE-2020-7608"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "1500"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-05T15:49:41.076779Z",
      "moduleName": "yargs-parser",
      "packageManager": "npm",
      "packageName": "yargs-parser",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-16T16:35:33Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832"
        },
        {
          "title": "GitHub Fix Commit",
          "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          ">5.0.0-security.0 <5.0.1",
          ">=6.0.0 <13.1.2",
          ">=14.0.0 <15.0.1",
          ">=16.0.0 <18.1.1"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "replace@1.1.1",
        "yargs@12.0.5",
        "yargs-parser@11.1.1"
      ],
      "upgradePath": [
        false,
        "replace@1.2.0",
        "yargs@15.3.1",
        "yargs-parser@18.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "yargs-parser",
      "version": "11.1.1",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/replace/node_modules/yargs-parser/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:H/E:F/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-BASE64URL-12139"
      ],
      "creationTime": "2018-03-04T08:54:39.014000Z",
      "credit": [
        "ChALkeR"
      ],
      "cvssScore": 7.1,
      "description": "## Overview\r\n[base64url](https://www.npmjs.com/package/base64url) Converting to, and from, base64url.\r\n\r\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. An attacker could extract sensitive data from uninitialized memory or may cause a Denial of Service (DoS) by passing in a large number, in setups where typed user input can be passed (e.g. from JSON).\r\n\r\n## Details\r\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\r\n\r\n\r\n## Remediation\r\nUpgrade `base64url` to version 3.0.0 or higher.\r\n**Note** This is vulnerable only for Node <=4\r\n\r\n## References\r\n- [HackerOne Report](https://hackerone.com/reports/321687)\r\n- [GitHub Commit](https://github.com/brianloveswords/base64url/commit/4355cb294123e86171daa9389f7afe6d2b2b9dae)",
      "disclosureTime": "2018-05-11T08:54:39Z",
      "exploit": "Functional",
      "fixedIn": [
        "3.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "padString"
          },
          "version": [
            "<=1.0.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/pad-string.js",
            "functionName": "padString"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "padString"
          },
          "version": [
            "<=1.0.6"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/pad-string.js",
            "functionName": "padString"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        }
      ],
      "id": "npm:base64url:20180511",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-BASE64URL-12139"
        ],
        "CVE": [],
        "CWE": [
          "CWE-201"
        ],
        "GHSA": [
          "GHSA-rvg8-pwq2-xj7q"
        ],
        "NSP": [
          "658"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2019-03-01T14:00:42.120317Z",
      "moduleName": "base64url",
      "packageManager": "npm",
      "packageName": "base64url",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-13T14:26:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/brianloveswords/base64url/commit/4355cb294123e86171daa9389f7afe6d2b2b9dae"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/321687"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.0.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Uninitialized Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0",
        "jws@0.2.6",
        "base64url@0.0.6"
      ],
      "upgradePath": [
        false,
        "express-jwt@3.0.0",
        "jsonwebtoken@5.0.0",
        "jws@3.1.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "base64url",
      "version": "0.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/base64url/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:H/E:F/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-BASE64URL-12139"
      ],
      "creationTime": "2018-03-04T08:54:39.014000Z",
      "credit": [
        "ChALkeR"
      ],
      "cvssScore": 7.1,
      "description": "## Overview\r\n[base64url](https://www.npmjs.com/package/base64url) Converting to, and from, base64url.\r\n\r\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. An attacker could extract sensitive data from uninitialized memory or may cause a Denial of Service (DoS) by passing in a large number, in setups where typed user input can be passed (e.g. from JSON).\r\n\r\n## Details\r\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\r\n\r\n\r\n## Remediation\r\nUpgrade `base64url` to version 3.0.0 or higher.\r\n**Note** This is vulnerable only for Node <=4\r\n\r\n## References\r\n- [HackerOne Report](https://hackerone.com/reports/321687)\r\n- [GitHub Commit](https://github.com/brianloveswords/base64url/commit/4355cb294123e86171daa9389f7afe6d2b2b9dae)",
      "disclosureTime": "2018-05-11T08:54:39Z",
      "exploit": "Functional",
      "fixedIn": [
        "3.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "padString"
          },
          "version": [
            "<=1.0.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/pad-string.js",
            "functionName": "padString"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "padString"
          },
          "version": [
            "<=1.0.6"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/pad-string.js",
            "functionName": "padString"
          },
          "version": [
            ">=2.0.0 <3.0.0"
          ]
        }
      ],
      "id": "npm:base64url:20180511",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-BASE64URL-12139"
        ],
        "CVE": [],
        "CWE": [
          "CWE-201"
        ],
        "GHSA": [
          "GHSA-rvg8-pwq2-xj7q"
        ],
        "NSP": [
          "658"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2019-03-01T14:00:42.120317Z",
      "moduleName": "base64url",
      "packageManager": "npm",
      "packageName": "base64url",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-13T14:26:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/brianloveswords/base64url/commit/4355cb294123e86171daa9389f7afe6d2b2b9dae"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/321687"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.0.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Uninitialized Memory Exposure",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0",
        "jws@0.2.6",
        "jwa@0.0.1",
        "base64url@0.0.6"
      ],
      "upgradePath": [
        false,
        "express-jwt@3.0.0",
        "jsonwebtoken@5.0.0",
        "jws@3.1.0",
        "jwa@1.1.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "base64url",
      "version": "0.0.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/base64url/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-JSONWEBTOKEN-10037"
      ],
      "creationTime": "2015-03-31T16:00:00Z",
      "credit": [
        "Tim McLean"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[`jsonwebtoken`](https://www.npmjs.com/package/jsonwebtoken) is a JSON Web token implementation for symmetric and asymmetric keys.\nAffected versions of this package are vulnerable to an Authentication Bypass attack, due to the \"algorithm\" not being enforced. Attackers are given the opportunity to choose the algorithm sent to the server and generate signatures with arbitrary contents. The server expects an asymmetric key (RSA) but is sent a symmetric key (HMAC-SHA) with RSA's public key, so instead of going through a key validation process, the server will think the public key is actually an HMAC private key.\n\n## Remediation\nUpgrade `jsonwebtoken` to version 4.2.2 or greater.\n\n## References\n- [GitHub Commit](https://github.com/auth0/node-jsonwebtoken/commit/1bb584bc382295eeb7ee8c4452a673a77a68b687)\n- [Tim McLean Blog](https://www.timmclean.net/2015/02/25/jwt-alg-none.html)\n- [Auth0 Blog](https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/)\n",
      "disclosureTime": "2015-03-31T16:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.2.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:jsonwebtoken:20150331",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-JSONWEBTOKEN-10037"
        ],
        "CVE": [
          "CVE-2015-9235"
        ],
        "CWE": [
          "CWE-592"
        ],
        "GHSA": [
          "GHSA-c7hr-j4mj-j2w6"
        ],
        "NSP": [
          "17"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2019-12-02T14:38:33.307820Z",
      "moduleName": "jsonwebtoken",
      "packageManager": "npm",
      "packageName": "jsonwebtoken",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:jsonwebtoken:20150331:0",
          "modificationTime": "2019-12-03T11:40:45.753281Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/jsonwebtoken/20150331/jsonwebtoken_20150331_0_0_1bb584bc382295eeb7ee8c4452a673a77a68b687_snyk.patch"
          ],
          "version": "=4.0.0 || =4.1.0 || =4.2.1"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-03-31T16:00:00Z",
      "references": [
        {
          "title": "Auth0 Blog",
          "url": "https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/auth0/node-jsonwebtoken/commit/1bb584bc382295eeb7ee8c4452a673a77a68b687"
        },
        {
          "title": "Tim McLean Blog",
          "url": "https://www.timmclean.net/2015/02/25/jwt-alg-none.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.2.2"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Authentication Bypass",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0"
      ],
      "upgradePath": [
        false,
        "express-jwt@2.1.0",
        "jsonwebtoken@4.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jsonwebtoken",
      "version": "0.1.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/express-jwt/node_modules/jsonwebtoken/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:N",
      "alternativeIds": [
        "SNYK-JS-JWS-10125"
      ],
      "creationTime": "2016-07-26T22:10:17.386000Z",
      "credit": [
        "Brian Brennan and Tim McLean"
      ],
      "cvssScore": 8.7,
      "description": "## Overview\r\n[`jws`](https://www.npmjs.com/package/jws) is an implementation of JSON Web Signatures.\r\nAffected versions of this package are vulnerable to an Authentication Bypass attack, due to the \"algorithm\" not being enforced in `jws.verify()`. Attackers are given the opportunity to choose the algorithm sent to the server and generate signatures with arbitrary contents. The server expects an asymmetric key (RSA) but is sent a symmetric key (HMAC-SHA) with RSA's public key, so instead of going through a key validation process, the server will think the public key is actually an HMAC private key.\r\n\r\n## Remediation\r\nUpgrade `jws` to version `3.0.0` or later.\r\n\r\n## References\r\n- [Auth0 Blog](https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/)",
      "disclosureTime": "2016-07-26T17:21:17Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:jws:20160726",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-JWS-10125"
        ],
        "CVE": [
          "CVE-2016-1000223"
        ],
        "CWE": [
          "CWE-310"
        ],
        "GHSA": [
          "GHSA-gjcw-v447-2w7q"
        ],
        "NSP": [
          "88"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2019-12-02T14:38:44.542321Z",
      "moduleName": "jws",
      "packageManager": "npm",
      "packageName": "jws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-07-26T17:21:17Z",
      "references": [
        {
          "title": "Auth0 Blog",
          "url": "https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/"
        },
        {
          "title": "GitHub Changelog",
          "url": "https://github.com/auth0/node-jws/commit/585d0e1e97b6747c10cf5b7689ccc5618a89b299%23diff-4ac32a78649ca5bdd8e0ba38b7006a1e"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.0.0"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Forgeable Public/Private Tokens",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0",
        "jws@0.2.6"
      ],
      "upgradePath": [
        false,
        "express-jwt@3.0.0",
        "jsonwebtoken@5.0.0",
        "jws@3.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jws",
      "version": "0.2.6",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/jws/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MOMENT-10084"
      ],
      "creationTime": "2016-02-01T19:00:03.862000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\r\n\r\nAn attacker can provide a long value to the `duration` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `moment` to version `2.11.2` or greater.\r\n\r\n## References\r\n- [OWASP ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\r\n- [GitHub Commit](https://github.com/moment/moment/commit/52a807b961ead925be11ff5e632c8f7325a9ce36)\r\n- [GitHub Issue](https://github.com/moment/moment/issues/2936)",
      "disclosureTime": "2016-01-26T20:04:21Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.11.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:moment:20160126",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MOMENT-10084"
        ],
        "CVE": [
          "CVE-2016-4055"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-87vv-r9j6-g5qv"
        ],
        "NSP": [
          "55"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2019-04-26T23:34:49.979996Z",
      "moduleName": "moment",
      "packageManager": "npm",
      "packageName": "moment",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:moment:20160126:0",
          "modificationTime": "2019-12-03T11:40:45.800167Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20160126/moment_20160126_0_0_34af63b8b21208a949dfaf42d228502c73d20ec0.patch"
          ],
          "version": "<=2.11.1 >2.10.6"
        },
        {
          "comments": [],
          "id": "patch:npm:moment:20160126:1",
          "modificationTime": "2019-12-03T11:40:45.801226Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20160126/moment_20160126_0_1_34af63b8b21208a949dfaf42d228502c73d20ec0.patch"
          ],
          "version": "<=2.10.6 >2.9.0"
        },
        {
          "comments": [],
          "id": "patch:npm:moment:20160126:2",
          "modificationTime": "2019-12-03T11:40:45.802270Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20160126/moment_20160126_0_2_34af63b8b21208a949dfaf42d228502c73d20ec0.patch"
          ],
          "version": "<=2.9.0 >2.2.1"
        },
        {
          "comments": [],
          "id": "patch:npm:moment:20160126:3",
          "modificationTime": "2019-12-03T11:40:45.803327Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20160126/moment_20160126_0_3_34af63b8b21208a949dfaf42d228502c73d20ec0.patch"
          ],
          "version": "=2.2.1"
        },
        {
          "comments": [],
          "id": "patch:npm:moment:20160126:4",
          "modificationTime": "2019-12-03T11:40:45.804441Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20160126/moment_20160126_0_4_34af63b8b21208a949dfaf42d228502c73d20ec0.patch"
          ],
          "version": "<2.2.1 >2.0.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2016-02-01T19:00:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/moment/moment/commit/52a807b961ead925be11ff5e632c8f7325a9ce36"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/moment/moment/issues/2936"
        },
        {
          "title": "OWASP ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.11.2"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0",
        "moment@2.0.0"
      ],
      "upgradePath": [
        false,
        "express-jwt@0.1.4",
        "jsonwebtoken@0.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "moment",
      "version": "2.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/moment/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-MOMENT-10164"
      ],
      "creationTime": "2016-10-23T06:57:59.675000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\r\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\r\n\r\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\r\n\r\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\r\n\r\n## Disclosure Timeline\r\n- October 19th, 2016 - Reported the issue to package owner.\r\n- October 19th, 2016 - Issue acknowledged by package owner.\r\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## References\r\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\r\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)",
      "disclosureTime": "2016-10-18T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.15.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:moment:20161019",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MOMENT-10164"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-09T09:57:45.808353Z",
      "moduleName": "moment",
      "packageManager": "npm",
      "packageName": "moment",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:moment:20161019:0",
          "modificationTime": "2019-12-03T11:40:45.848228Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_1.patch"
          ],
          "version": "<2.15.2 >=2.14.0"
        },
        {
          "comments": [],
          "id": "patch:npm:moment:20161019:1",
          "modificationTime": "2019-12-03T11:40:45.849308Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_0.patch"
          ],
          "version": "<2.14.0 >=2.12.0"
        }
      ],
      "proprietary": true,
      "publicationTime": "2016-10-24T06:57:59Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9"
        },
        {
          "title": "Proof of concept",
          "url": "https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.15.2"
        ]
      },
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "medium",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0",
        "moment@2.0.0"
      ],
      "upgradePath": [
        false,
        "express-jwt@0.1.4",
        "jsonwebtoken@0.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "moment",
      "version": "2.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/moment/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MOMENT-10841"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `moment` to version 2.19.3 or higher.\n## References\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\n- [GitHub PR](https://github.com/moment/moment/pull/4326)\n",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.19.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "moment.js",
            "functionName": "monthsRegex"
          },
          "version": [
            "<2.19.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "moment.js",
            "functionName": "monthsShortRegex"
          },
          "version": [
            "<2.19.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "moment.js",
            "functionName": "weekdaysMinRegex"
          },
          "version": [
            ">=2.13.0 <2.19.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "moment.js",
            "functionName": "weekdaysRegex"
          },
          "version": [
            ">=2.13.0 <2.19.3"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "moment.js",
            "functionName": "weekdaysShortRegex"
          },
          "version": [
            ">=2.13.0 <2.19.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "moment.js",
            "functionName": "monthsRegex"
          },
          "version": [
            "<2.19.3"
          ]
        },
        {
          "functionId": {
            "filePath": "moment.js",
            "functionName": "monthsShortRegex"
          },
          "version": [
            "<2.19.3"
          ]
        },
        {
          "functionId": {
            "filePath": "moment.js",
            "functionName": "weekdaysMinRegex"
          },
          "version": [
            ">=2.13.0 <2.19.3"
          ]
        },
        {
          "functionId": {
            "filePath": "moment.js",
            "functionName": "weekdaysRegex"
          },
          "version": [
            ">=2.13.0 <2.19.3"
          ]
        },
        {
          "functionId": {
            "filePath": "moment.js",
            "functionName": "weekdaysShortRegex"
          },
          "version": [
            ">=2.13.0 <2.19.3"
          ]
        }
      ],
      "id": "npm:moment:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MOMENT-10841"
        ],
        "CVE": [
          "CVE-2017-18214"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-446m-mv8f-q348"
        ],
        "NSP": [
          "532"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-06-12T14:36:45.510184Z",
      "moduleName": "moment",
      "packageManager": "npm",
      "packageName": "moment",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:moment:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.878422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/moment/20170905/moment_0_0_69ed9d44957fa6ab12b73d2ae29d286a857b80eb.patch"
          ],
          "version": "<2.19.3 >=2.16.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-11-28T14:47:22Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/moment/moment/issues/4163"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/moment/moment/pull/4326"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.19.3"
        ]
      },
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "low",
      "from": [
        "juice-shop@9.3.1",
        "express-jwt@0.1.3",
        "jsonwebtoken@0.1.0",
        "moment@2.0.0"
      ],
      "upgradePath": [
        false,
        "express-jwt@0.1.4",
        "jsonwebtoken@0.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "moment",
      "version": "2.0.0",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/moment/package.json",
      "parentDepType": "prod"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-UNDERSCORESTRING-12168"
      ],
      "creationTime": "2018-06-21T17:51:09.741000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[underscore.string](https://www.npmjs.com/package/underscore.string) is a Javascript lacks complete string manipulation operations.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `underscore.string` to version 3.3.6 or higher.\n## References\n- [GitHub Commit](https://github.com/epeli/underscore.string/commit/f486cd684c94c12db48b45d52b1472a1b9661029)\n- [GitHub Commit](https://github.com/esamattis/underscore.string/commit/d095c4af392fe105797288c352c7ccb8a3413425)\n- [GitHub Issue](https://github.com/epeli/underscore.string/issues/510)\n- [GitHub PR](https://github.com/esamattis/underscore.string/pull/525)\n",
      "disclosureTime": "2017-09-08T17:51:09Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.3.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "unescapeHTML.js",
            "functionName": "module.exports"
          },
          "version": [
            ">2.4.1 <3.3.5"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "unescapeHTML.js",
            "functionName": "module.exports"
          },
          "version": [
            ">2.4.1 <3.3.5"
          ]
        }
      ],
      "id": "npm:underscore.string:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UNDERSCORESTRING-12168"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-v2p6-4mp7-3r9v"
        ],
        "NSP": [
          "745"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-25T12:34:17.626077Z",
      "moduleName": "underscore.string",
      "packageManager": "npm",
      "packageName": "underscore.string",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-06-25T13:19:28Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/epeli/underscore.string/commit/f486cd684c94c12db48b45d52b1472a1b9661029"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/esamattis/underscore.string/commit/d095c4af392fe105797288c352c7ccb8a3413425"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/epeli/underscore.string/issues/510"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/esamattis/underscore.string/pull/525"
        }
      ],
      "semver": {
        "vulnerable": [
          ">2.4.0 <3.3.6"
        ]
      },
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "severityWithCritical": "high",
      "from": [
        "juice-shop@9.3.1",
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "underscore.string@3.3.5"
      ],
      "upgradePath": [
        false,
        "grunt@1.0.4",
        "grunt-legacy-util@1.1.1",
        "underscore.string@3.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "underscore.string",
      "version": "3.3.5",
      "__filename": "/Users/azunna/Documents/Security Testing/7ASecurity/Webinar/juice-shop_9.3.1/node_modules/underscore.string/package.json",
      "parentDepType": "prod"
    }
  ],
  "ok": false,
  "dependencyCount": 864,
  "org": "video-distribution",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": null,
  "summary": "296 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-03-07T00:18:41.509507Z",
        "credit": [
          "Peter van der Zee"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[acorn](https://github.com/acornjs/acorn) is a tiny, fast JavaScript parser written in JavaScript.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nvia a regex in the form of `/[x-\\ud800]/u`, which causes the parser to enter an infinite loop. \r\n\r\nThis string is not a valid `UTF16` and is therefore not sanitized before reaching the parser. An application which processes untrusted input and passes it directly to `acorn`, will allow attackers to leverage the vulnerability leading to a Denial of Service.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `acorn` to version 5.7.4, 6.4.1, 7.1.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802)\n\n- [GitHub Issue 6.x Branch](https://github.com/acornjs/acorn/issues/929)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1488)\n",
        "disclosureTime": "2020-03-02T19:21:25Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.7.4",
          "6.4.1",
          "7.1.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "dist/acorn.js",
              "functionName": "RegExpValidationState.prototype.at"
            },
            "version": [
              ">=5.5.0 <5.7.4",
              ">=6.0.0 <6.4.1",
              ">=7.0.0 <7.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "dist/acorn.js",
              "functionName": "RegExpValidationState.prototype.nextIndex"
            },
            "version": [
              ">=5.5.0 <5.7.4",
              ">=6.0.0 <6.4.1",
              ">=7.0.0 <7.1.1"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "dist/acorn.js",
              "functionName": "RegExpValidationState.prototype.at"
            },
            "version": [
              ">=5.5.0 <5.7.4",
              ">=6.0.0 <6.4.1",
              ">=7.0.0 <7.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/acorn.js",
              "functionName": "RegExpValidationState.prototype.nextIndex"
            },
            "version": [
              ">=5.5.0 <5.7.4",
              ">=6.0.0 <6.4.1",
              ">=7.0.0 <7.1.1"
            ]
          }
        ],
        "id": "SNYK-JS-ACORN-559469",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-6chw-6frg-f759"
          ],
          "NSP": [
            "1488"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-04-30T07:41:03.089378Z",
        "moduleName": "acorn",
        "packageManager": "npm",
        "packageName": "acorn",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-03-07T00:19:23Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/acornjs/acorn/commit/793c0e569ed1158672e3a40aeed1d8518832b802"
          },
          {
            "title": "GitHub Issue 6.x Branch",
            "url": "https://github.com/acornjs/acorn/issues/929"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1488"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=5.5.0 <5.7.4",
            ">=6.0.0 <6.4.1",
            ">=7.0.0 <7.1.1"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "juice-shop@9.3.1",
          "pdfkit@0.11.0",
          "linebreak@1.0.2",
          "brfs@2.0.2",
          "static-module@3.0.3",
          "acorn-node@1.8.2",
          "acorn@7.1.0"
        ],
        "upgradePath": [
          false,
          "pdfkit@0.11.0",
          "linebreak@1.0.2",
          "brfs@2.0.2",
          "static-module@3.0.3",
          "acorn-node@1.8.2",
          "acorn@7.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "acorn",
        "version": "7.1.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-16T08:19:48.462528Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
        "disclosureTime": "2020-07-16T08:14:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.12.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-AJV-584908",
        "identifiers": {
          "CVE": [
            "CVE-2020-15366"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-07-16T13:58:04.600521Z",
        "moduleName": "ajv",
        "packageManager": "npm",
        "packageName": "ajv",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-16T13:58:04Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.12.3"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "request@2.88.0",
          "har-validator@5.1.3",
          "ajv@6.10.2"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "request@2.88.0",
          "har-validator@5.1.3",
          "ajv@6.12.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ajv",
        "version": "6.10.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-08-28T12:18:44.906258Z",
        "credit": [
          "chalker"
        ],
        "cvssScore": 7.7,
        "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
        "disclosureTime": "2020-08-27T15:16:42Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.2.1",
          "3.0.1",
          "4.0.3",
          "1.2.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-BL-608877",
        "identifiers": {
          "CVE": [
            "CVE-2020-8244"
          ],
          "CWE": [
            "CWE-9"
          ],
          "GHSA": [
            "GHSA-pp7h-53gx-mx7r"
          ],
          "NSP": [
            "1555"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-09-04T12:31:03.817670Z",
        "moduleName": "bl",
        "packageManager": "npm",
        "packageName": "bl",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-28T12:18:48Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/966347"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=2.2.0 <2.2.1",
            ">=3.0.0 <3.0.1",
            ">=4.0.0 <4.0.3",
            "<1.2.3"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Remote Memory Exposure",
        "from": [
          "juice-shop@9.3.1",
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "tar-fs@2.0.0",
          "tar-stream@2.1.0",
          "bl@3.0.0"
        ],
        "upgradePath": [
          false,
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "tar-fs@2.0.0",
          "tar-stream@2.1.0",
          "bl@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "bl",
        "version": "3.0.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-03-05T17:38:48.014514Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[color-string](https://www.npmjs.org/package/color-string) is a Parser and generator for CSS color strings\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `hwb` regular expression in the `cs.get.hwb` function in index.js. The affected regular expression exhibits quadratic worst-case time complexity.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `color-string` to version 1.5.5 or higher.\n## References\n- [GitHub Additional Information](https://github.com/Qix-/color-string/blob/master/index.js#L153)\n- [Github Commit](https://github.com/Qix-/color-string/commit/0789e21284c33d89ebc4ab4ca6f759b9375ac9d3)\n- [PoC](https://github.com/yetingli/PoCs/blob/main/CVE-2021-29060/Color-String.md)\n",
        "disclosureTime": "2021-03-05T17:36:13Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.5.5"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-COLORSTRING-1082939",
        "identifiers": {
          "CVE": [
            "CVE-2021-29060"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-257v-vj4p-3w2h"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-03-12T15:08:04.894121Z",
        "moduleName": "color-string",
        "packageManager": "npm",
        "packageName": "color-string",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-03-12T15:08:05Z",
        "references": [
          {
            "title": "GitHub Additional Information",
            "url": "https://github.com/Qix-/color-string/blob/master/index.js%23L153"
          },
          {
            "title": "Github Commit",
            "url": "https://github.com/Qix-/color-string/commit/0789e21284c33d89ebc4ab4ca6f759b9375ac9d3"
          },
          {
            "title": "PoC",
            "url": "https://github.com/yetingli/PoCs/blob/main/CVE-2021-29060/Color-String.md"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.5.5"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "juice-shop@9.3.1",
          "winston@3.2.1",
          "diagnostics@1.1.1",
          "colorspace@1.1.2",
          "color@3.0.0",
          "color-string@1.5.3"
        ],
        "upgradePath": [
          false,
          "winston@3.2.1",
          "diagnostics@1.1.1",
          "colorspace@1.1.2",
          "color@3.0.0",
          "color-string@1.5.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "color-string",
        "version": "1.5.3",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-02-27T10:34:55.291825Z",
        "credit": [
          "Oscar Arnflo"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[decompress](https://www.npmjs.com/package/decompress) is a package that can be used for extracting archives.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nUpgrade `decompress` to version 4.2.1 or higher.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
        "disclosureTime": "2019-10-15T20:29:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-DECOMPRESS-557358",
        "identifiers": {
          "CVE": [
            "CVE-2020-12265"
          ],
          "CWE": [
            "CWE-29"
          ],
          "GHSA": [
            "GHSA-qgfr-5hqp-vrw9"
          ],
          "NSP": [
            "1217"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-06-12T14:37:03.072953Z",
        "moduleName": "decompress",
        "packageManager": "npm",
        "packageName": "decompress",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-02-27T13:28:41Z",
        "references": [
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/kevva/decompress/pull/73"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/kevva/decompress/issues/71"
          },
          {
            "title": "GitHub PR decompress-tar",
            "url": "https://github.com/kevva/decompress-tar/pull/12"
          },
          {
            "title": "NPM Advisory",
            "url": "https://www.npmjs.com/advisories/1217"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
        "from": [
          "juice-shop@9.3.1",
          "download@7.1.0",
          "decompress@4.2.0"
        ],
        "upgradePath": [
          false,
          "download@7.1.0",
          "decompress@4.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "decompress",
        "version": "4.2.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-02T11:17:35.161853Z",
        "credit": [
          "Oscar Arnflo"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
        "disclosureTime": "2019-10-15T20:29:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports"
            },
            "version": [
              "*"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            },
            "version": [
              "*"
            ]
          }
        ],
        "id": "SNYK-JS-DECOMPRESSTAR-559095",
        "identifiers": {
          "CVE": [
            "CVE-2020-12265"
          ],
          "CWE": [
            "CWE-29"
          ],
          "GHSA": [
            "GHSA-qgfr-5hqp-vrw9"
          ],
          "NSP": [
            "1217"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-06-12T14:36:55.633284Z",
        "moduleName": "decompress-tar",
        "packageManager": "npm",
        "packageName": "decompress-tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-02-27T13:28:41Z",
        "references": [
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/kevva/decompress/pull/73"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/kevva/decompress/issues/71"
          },
          {
            "title": "GitHub PR decompress-tar",
            "url": "https://github.com/kevva/decompress-tar/pull/12"
          },
          {
            "title": "NPM Advisory",
            "url": "https://www.npmjs.com/advisories/1217"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
        "from": [
          "juice-shop@9.3.1",
          "download@7.1.0",
          "decompress@4.2.0",
          "decompress-targz@4.1.1",
          "decompress-tar@4.1.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "decompress-tar",
        "version": "4.1.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-23T16:13:42.109692Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
        "disclosureTime": "2020-11-28T00:00:00Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.8",
          "2.8.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HOSTEDGITINFO-1088355",
        "identifiers": {
          "CVE": [
            "CVE-2021-23362"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-43f8-2h32-f4cj"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-04-08T12:53:49.093606Z",
        "moduleName": "hosted-git-info",
        "packageManager": "npm",
        "packageName": "hosted-git-info",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-03-23T17:13:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.0.8",
            "<2.8.9"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "juice-shop@9.3.1",
          "grunt@1.0.4",
          "dateformat@1.0.12",
          "meow@3.7.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.5.0",
          "hosted-git-info@2.8.5"
        ],
        "upgradePath": [
          false,
          "grunt@1.0.4",
          "dateformat@1.0.12",
          "meow@3.7.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.5.0",
          "hosted-git-info@2.8.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "hosted-git-info",
        "version": "2.8.5",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "disclosureTime": "2020-12-08T13:02:04Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-INI-1048974",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-10T18:09:23.069283Z",
        "moduleName": "ini",
        "packageManager": "npm",
        "packageName": "ini",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-12-10T18:08:38Z",
        "references": [
          {
            "title": "Eugene Lim - Research Blog Post",
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "download@7.1.0",
          "caw@2.0.1",
          "get-proxy@2.1.0",
          "npm-conf@1.1.3",
          "config-chain@1.1.12",
          "ini@1.3.5"
        ],
        "upgradePath": [
          false,
          "download@7.1.0",
          "caw@2.0.1",
          "get-proxy@2.1.0",
          "npm-conf@1.1.3",
          "config-chain@1.1.12",
          "ini@1.3.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ini",
        "version": "1.3.5",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
        "alternativeIds": [],
        "creationTime": "2021-11-14T15:11:37.579980Z",
        "credit": [
          "Yoshino-s"
        ],
        "cvssScore": 8.6,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
        "disclosureTime": "2021-11-14T15:05:57Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.4.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-JSONSCHEMA-1920922",
        "identifiers": {
          "CVE": [
            "CVE-2021-3918"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-11-14T16:49:43.234923Z",
        "moduleName": "json-schema",
        "packageManager": "npm",
        "packageName": "json-schema",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-11-14T16:49:43.070251Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.4.0"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "request@2.88.0",
          "http-signature@1.2.0",
          "jsprim@1.4.1",
          "json-schema@0.2.3"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "request@2.88.0",
          "http-signature@1.2.0",
          "jsprim@1.4.2",
          "json-schema@0.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "json-schema",
        "version": "0.2.3",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "credit": [
          "Feng Xiao"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "disclosureTime": "2019-12-16T14:31:14Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "id": "SNYK-JS-KINDOF-537849",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ],
          "NSP": [
            "1490"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-06-12T14:36:55.567043Z",
        "moduleName": "kind-of",
        "packageManager": "npm",
        "packageName": "kind-of",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-19T14:31:13Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jonschlinkert/kind-of/issues/30"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jonschlinkert/kind-of/pull/31"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Validation Bypass",
        "from": [
          "juice-shop@9.3.1",
          "check-dependencies@1.1.0",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "check-dependencies@1.1.0",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "kind-of",
        "version": "6.0.2",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-07-19T12:00:32.890460Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash.set](https://www.npmjs.com/package/lodash.set) is a lodash method _.set exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `lodash.set`.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASHSET-1320032",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-12-28T14:47:08.588679Z",
        "moduleName": "lodash.set",
        "packageManager": "npm",
        "packageName": "lodash.set",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "grunt-replace-json@0.1.0",
          "lodash.set@4.3.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash.set",
        "version": "4.3.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-11-06T09:43:57.923159Z",
        "credit": [
          "Francois Gauthier"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[marsdb](https://github.com/c58/marsdb) is a MarsDB is a lightweight client-side database.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. In the `DocumentMatcher` class, selectors on `$where` clauses are passed to a Function constructor unsanitized. This allows attackers to run arbitrary commands in the system when the function is executed.\n## Remediation\nThere is no fixed version for `marsdb`.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1122)\n",
        "disclosureTime": "2019-08-29T17:53:27Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-MARSDB-480405",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-5mrr-rgp6-x4gr"
          ],
          "NSP": [
            "1122"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-06-12T14:37:03.740394Z",
        "moduleName": "marsdb",
        "packageManager": "npm",
        "packageName": "marsdb",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-06T11:41:52Z",
        "references": [
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1122"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "critical",
        "socialTrendAlert": false,
        "title": "Arbitrary Code Injection",
        "from": [
          "juice-shop@9.3.1",
          "marsdb@0.6.11"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "marsdb",
        "version": "0.6.11",
        "severityWithCritical": "critical"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.2.6"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-MINIMIST-2429795",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-03-22T13:30:22.794800Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-21T12:09:35Z",
        "references": [
          {
            "title": "Fix Commit",
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/substack/minimist/issues/164"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "tar-fs@2.0.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "tar-fs@2.0.0",
          "mkdirp@0.5.2",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "minimist",
        "version": "0.0.8",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            "1179"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "tar-fs@2.0.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "tar-fs@2.0.0",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "minimist",
        "version": "0.0.8",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-09-30T15:14:09.828066Z",
        "credit": [
          "Alessio Della Libera of Snyk Security Team"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[mout](https://www.npmjs.com/package/mout) is a Modular Utilities\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `deepFillIn` function can be used to 'fill missing properties recursively', while the `deepMixIn` 'mixes objects into the target object, recursively mixing existing child objects as well'. In both cases, the key used to access the target object recursively is not checked, leading to a Prototype Pollution.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mout` to version 1.2.3 or higher.\n## References\n- [GitHub Additional Information](https://github.com/mout/mout/blob/master/src/object/deepFillIn.js)\n- [GitHub Additional Information](https://github.com/mout/mout/blob/master/src/object/deepMixIn.js)\n- [GitHub Fix Commit](https://github.com/mout/mout/commit/bd1821223989e815bc7dac1217bc7859777ce0bf)\n",
        "disclosureTime": "2020-09-30T15:06:58Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "src/object/deepFillIn.js",
              "functionName": "deepFillIn"
            },
            "version": [
              "*"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "src/object/deepFillIn.js",
              "functionName": "deepFillIn"
            },
            "version": [
              "*"
            ]
          }
        ],
        "id": "SNYK-JS-MOUT-1014544",
        "identifiers": {
          "CVE": [
            "CVE-2020-7792"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-13T14:49:00.699795Z",
        "moduleName": "mout",
        "packageManager": "npm",
        "packageName": "mout",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-12-13T15:57:50Z",
        "references": [
          {
            "title": "GitHub Additional Information",
            "url": "https://github.com/mout/mout/blob/master/src/object/deepFillIn.js"
          },
          {
            "title": "GitHub Additional Information",
            "url": "https://github.com/mout/mout/blob/master/src/object/deepMixIn.js"
          },
          {
            "title": "GitHub Fix Commit",
            "url": "https://github.com/mout/mout/commit/bd1821223989e815bc7dac1217bc7859777ce0bf"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.2.3"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "check-dependencies@1.1.0",
          "bower-config@1.4.1",
          "mout@1.2.2"
        ],
        "upgradePath": [
          false,
          "check-dependencies@1.1.0",
          "bower-config@1.4.1",
          "mout@1.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "mout",
        "version": "1.2.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-01-27T15:00:51.139678Z",
        "credit": [
          "Cristian-Alexandru Staicu",
          "Abdullah Alhamdan"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[notevil](https://www.npmjs.com/package/notevil) is a module uses esprima to parse the javascript AST then walks each node and evaluates the result\r\n**Note:**This package has been deprecated.\n\nAffected versions of this package are vulnerable to Sandbox Bypass. It is vulnerable to Sandbox Escape leading to Prototype pollution. The package fails to restrict access to the main context, allowing an attacker to add or modify an object's prototype.\r\n\r\n**Note:**  This vulnerability derives from an incomplete fix in [SNYK-JS-NOTEVIL-608878](https://security.snyk.io/vuln/SNYK-JS-NOTEVIL-608878).\r\n\r\n## PoC:\r\n```js\r\nvar safeEval = require('notevil')\r\n\r\nsafeEval(`  \r\nObject.defineProperty(({})[[\"__proto__\"]][[\"__proto__\"]], 'polluted', {\r\n  value: 'success'\r\n});`);\r\n\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `notevil`.\n",
        "disclosureTime": "2022-01-27T15:00:48Z",
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NOTEVIL-2385946",
        "identifiers": {
          "CVE": [
            "CVE-2021-23771"
          ],
          "CWE": [
            "CWE-1321",
            "CWE-265"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-14T16:21:53.865272Z",
        "moduleName": "notevil",
        "packageManager": "npm",
        "packageName": "notevil",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2022-02-14T16:21:53.819915Z",
        "references": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Sandbox Bypass",
        "from": [
          "juice-shop@9.3.1",
          "notevil@1.3.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "notevil",
        "version": "1.3.2",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "disclosureTime": "2021-02-19T15:54:01Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-PATHPARSE-1077067",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-05-26T10:53:58.992601Z",
        "moduleName": "path-parse",
        "packageManager": "npm",
        "packageName": "path-parse",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-05-04T08:38:49Z",
        "references": [
          {
            "title": "GitHub Issue 1",
            "url": "https://github.com/jbgutierrez/path-parse/issues/8"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jbgutierrez/path-parse/pull/10"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "juice-shop@9.3.1",
          "grunt@1.0.4",
          "dateformat@1.0.12",
          "meow@3.7.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.5.0",
          "resolve@1.14.1",
          "path-parse@1.0.6"
        ],
        "upgradePath": [
          false,
          "grunt@1.0.4",
          "dateformat@1.0.12",
          "meow@3.7.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.5.0",
          "resolve@1.14.1",
          "path-parse@1.0.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "path-parse",
        "version": "1.0.6",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-03-03T16:57:58.620057Z",
        "credit": [
          "CykuTW"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[pug-code-gen](https://www.npmjs.org/package/pug-code-gen) is a Default code-generator for pug.  It generates HTML via a JavaScript template function.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). If a remote attacker was able to control the pretty option of the pug compiler, e.g. if you spread a user provided object such as the query parameters of a request into the pug template inputs, it was possible for them to achieve remote code execution on the node.js backend.\n## Remediation\nUpgrade `pug-code-gen` to version 2.0.3, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/pugjs/pug/commit/991e78f7c4220b2f8da042877c6f0ef5a4683be0)\n- [GitHub PR](https://github.com/pugjs/pug/pull/3314)\n- [POC: GitHub Issue](https://github.com/pugjs/pug/issues/3312)\n",
        "disclosureTime": "2021-02-10T16:29:43Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.3",
          "3.0.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-PUGCODEGEN-1082232",
        "identifiers": {
          "CVE": [
            "CVE-2021-21353"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-p493-635q-r6gr"
          ],
          "NSP": [
            "1643",
            "1644"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-03-03T17:08:11.374289Z",
        "moduleName": "pug-code-gen",
        "packageManager": "npm",
        "packageName": "pug-code-gen",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-03-01T16:46:36Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/pugjs/pug/commit/991e78f7c4220b2f8da042877c6f0ef5a4683be0"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/pugjs/pug/pull/3314"
          },
          {
            "title": "POC: GitHub Issue",
            "url": "https://github.com/pugjs/pug/issues/3312"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.3",
            ">=3.0.0 <3.0.2"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Remote Code Execution (RCE)",
        "from": [
          "juice-shop@9.3.1",
          "pug@2.0.4",
          "pug-code-gen@2.0.2"
        ],
        "upgradePath": [
          false,
          "pug@2.0.4",
          "pug-code-gen@2.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "pug-code-gen",
        "version": "2.0.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-01-26T09:25:03.374211Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure. When getting `Location response` header after fetching a remote url with Cookie, it will follow that url and fetch it with the provided cookie which will be then leaked to the attacker .\n## Remediation\nUpgrade `simple-get` to version 2.8.2, 3.1.1, 4.0.1 or higher.\n## References\n- [Github Commit](https://github.com/feross/simple-get/commit/43c272db3e4b1383cb03d80338dba3e08c451641)\n- [GitHub Commit](https://github.com/feross/simple-get/commit/6eb82c090e30e7146fa5e9ae7212ca16b24b08b4)\n- [GitHub Commit](https://github.com/feross/simple-get/commit/e4af095e06cd69a9235013e8507e220a79b9684f)\n",
        "disclosureTime": "2022-01-26T09:13:34Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.8.2",
          "3.1.1",
          "4.0.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-SIMPLEGET-2361683",
        "identifiers": {
          "CVE": [
            "CVE-2022-0355"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-03T08:12:41.736222Z",
        "moduleName": "simple-get",
        "packageManager": "npm",
        "packageName": "simple-get",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-26T16:17:22Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/feross/simple-get/commit/43c272db3e4b1383cb03d80338dba3e08c451641"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/feross/simple-get/commit/6eb82c090e30e7146fa5e9ae7212ca16b24b08b4"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/feross/simple-get/commit/e4af095e06cd69a9235013e8507e220a79b9684f"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.8.2",
            ">=3.0.0 <3.1.1",
            ">=4.0.0 <4.0.1"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "from": [
          "juice-shop@9.3.1",
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "simple-get@3.1.0"
        ],
        "upgradePath": [
          false,
          "grunt-contrib-compress@1.6.0",
          "iltorb@2.4.4",
          "prebuild-install@5.3.3",
          "simple-get@3.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "simple-get",
        "version": "3.1.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-01-08T11:00:31.327189Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[socket.io-parser](https://www.npmjs.org/package/socket.io-parser) is a socket.io protocol parser\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via a large packet because a concatenation approach is used.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `socket.io-parser` to version 3.3.2, 3.4.1 or higher.\n## References\n- [GitHub Commit](https://github.com/socketio/socket.io-parser/commit/dcb942d24db97162ad16a67c2a0cf30875342d55)\n- [PoC](https://github.com/bcaller/kill-engine-io)\n- [Research Blogpost](https://blog.caller.xyz/socketio-engineio-dos/)\n",
        "disclosureTime": "2021-01-08T10:59:22Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.3.2",
          "3.4.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-SOCKETIOPARSER-1056752",
        "identifiers": {
          "CVE": [
            "CVE-2020-36049"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-xfhh-g9f5-x4m4"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-01-10T14:09:25.619089Z",
        "moduleName": "socket.io-parser",
        "packageManager": "npm",
        "packageName": "socket.io-parser",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-01-08T16:03:18Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/socketio/socket.io-parser/commit/dcb942d24db97162ad16a67c2a0cf30875342d55"
          },
          {
            "title": "PoC",
            "url": "https://github.com/bcaller/kill-engine-io"
          },
          {
            "title": "Research Blogpost",
            "url": "https://blog.caller.xyz/socketio-engineio-dos/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.3.2",
            ">3.4.0 <3.4.1"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "from": [
          "juice-shop@9.3.1",
          "socket.io@2.3.0",
          "socket.io-client@2.3.0",
          "socket.io-parser@3.3.0"
        ],
        "upgradePath": [
          false,
          "socket.io@2.3.0",
          "socket.io-client@2.3.0",
          "socket.io-parser@3.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "socket.io-parser",
        "version": "3.3.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2021-08-04T06:32:44.747650Z",
        "credit": [
          "ginkoid",
          "chen-robert"
        ],
        "cvssScore": 8.2,
        "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient symlink protection.\r\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting tar files that contain both a directory and a symlink with the same name as the directory. This order of operations results in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to `mkdir` for that directory are skipped.\r\nHowever, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 3.2.3, 4.4.15, 5.0.7, 6.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20)\n",
        "disclosureTime": "2021-08-04T06:13:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.2.3",
          "4.4.15",
          "5.0.7",
          "6.1.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TAR-1536528",
        "identifiers": {
          "CVE": [
            "CVE-2021-32803"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-r628-mhmh-qjhw"
          ],
          "NSP": [
            "1771"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-04T07:24:53.457127Z",
        "moduleName": "tar",
        "packageManager": "npm",
        "packageName": "tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-08-04T07:24:54.942553Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.2.3",
            ">=4.0.0 <4.4.15",
            ">=5.0.0 <5.0.7",
            ">=6.0.0 <6.1.2"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary File Overwrite",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.13"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.15"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tar",
        "version": "4.4.13",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2021-08-04T06:40:36.725155Z",
        "credit": [
          "ginkoid",
          "chen-robert"
        ],
        "cvssScore": 8.2,
        "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient absolute path sanitization.\r\n\r\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example, the path `/home/user/.bashrc` would turn into `home/user/.bashrc`.\r\n\r\nThis logic is insufficient when file paths contain repeated path roots such as `////home/user/.bashrc`. `node-tar` only strips a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) still resolves to an absolute path.\n## Remediation\nUpgrade `tar` to version 3.2.2, 4.4.14, 5.0.6, 6.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4)\n",
        "disclosureTime": "2021-08-04T06:33:52Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.2.2",
          "4.4.14",
          "5.0.6",
          "6.1.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TAR-1536531",
        "identifiers": {
          "CVE": [
            "CVE-2021-32804"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-3jfq-g458-7qm9"
          ],
          "NSP": [
            "1770"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-04T07:24:55.395728Z",
        "moduleName": "tar",
        "packageManager": "npm",
        "packageName": "tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-08-04T07:24:55.599985Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.4.14",
            ">=5.0.0 <5.0.6",
            ">=6.0.0 <6.1.1"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary File Overwrite",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.13"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.14"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tar",
        "version": "4.4.13",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-08-05T12:41:27.304655Z",
        "credit": [
          "@isaacs"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). When stripping the trailing slash from `files` arguments, the  `f.replace(/\\/+$/, '')` performance of this function can exponentially degrade when `f` contains many `/` characters resulting in ReDoS. \r\n\r\nThis vulnerability is not likely to be exploitable as it requires that the untrusted input is being passed into the `tar.extract()` or `tar.list()` array of entries to parse/extract, which would be unusual.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tar` to version 6.1.4, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf)\n",
        "disclosureTime": "2021-08-05T12:38:55Z",
        "exploit": "Unproven",
        "fixedIn": [
          "6.1.4",
          "5.0.8",
          "4.4.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TAR-1536758",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-11T12:03:25.691359Z",
        "moduleName": "tar",
        "packageManager": "npm",
        "packageName": "tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-08-05T14:33:10Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.1.4",
            ">=5.0.0 <5.0.8",
            "<4.4.16"
          ]
        },
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.13"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.16"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tar",
        "version": "4.4.13",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
        "alternativeIds": [],
        "creationTime": "2021-09-01T05:55:13.724747Z",
        "credit": [
          "ginkoid",
          "chen-robert"
        ],
        "cvssScore": 8.5,
        "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic was insufficient when extracting `tar` files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators. However, `\\` is a valid filename character on posix systems.\r\n\r\nBy first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location. This can lead to extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\r\n\r\nAdditionally, a similar confusion could arise on case-insensitive filesystems. If a `tar` archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but not from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created.\n## Remediation\nUpgrade `tar` to version 6.1.7, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728)\n",
        "disclosureTime": "2021-09-01T05:45:02Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.1.7",
          "5.0.8",
          "4.4.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TAR-1579147",
        "identifiers": {
          "CVE": [
            "CVE-2021-37701"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-9r2w-394v-53qc"
          ],
          "NSP": [
            "1779"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-01T07:55:12.792736Z",
        "moduleName": "tar",
        "packageManager": "npm",
        "packageName": "tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-01T07:55:13.009873Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.1.7",
            ">=5.0.0 <5.0.8",
            "<4.4.16"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary File Write",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.13"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.16"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tar",
        "version": "4.4.13",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
        "alternativeIds": [],
        "creationTime": "2021-09-01T06:04:41.432860Z",
        "credit": [
          "ginkoid",
          "chen-robert",
          "JarLob"
        ],
        "cvssScore": 8.5,
        "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting `tar` files that contain two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts.\r\nA specially crafted `tar` archive can include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. This leads to bypassing `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location and extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455)\n",
        "disclosureTime": "2021-09-01T05:57:49Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.1.9",
          "5.0.10",
          "4.4.18"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TAR-1579152",
        "identifiers": {
          "CVE": [
            "CVE-2021-37712"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-qq89-hq3f-393p"
          ],
          "NSP": [
            "1780"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-01T07:55:12.153496Z",
        "moduleName": "tar",
        "packageManager": "npm",
        "packageName": "tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-01T07:55:12.359155Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.1.9",
            ">=5.0.0 <5.0.10",
            "<4.4.18"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary File Write",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.13"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.18"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tar",
        "version": "4.4.13",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
        "alternativeIds": [],
        "creationTime": "2021-09-01T06:09:32.775270Z",
        "credit": [
          "ginkoid",
          "chen-robert",
          "JarLob"
        ],
        "cvssScore": 8.5,
        "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\r\n\r\nThis logic is insufficient on Windows systems when extracting `tar` files that contain a path that is not an absolute path, but specify a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` resolves against the current working directory on the `C:` drive, rather than the extraction target directory.\r\n\r\nAdditionally, a `..` portion of the path can occur immediately after the drive letter, such as `C:../foo`, and is not properly sanitized by the logic that checks for `..` within the normalized and split portions of the path.\r\n\r\n**Note:** This only affects users of `node-tar` on Windows systems.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598)\n",
        "disclosureTime": "2021-09-01T06:05:10Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.1.9",
          "5.0.10",
          "4.4.18"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TAR-1579155",
        "identifiers": {
          "CVE": [
            "CVE-2021-37713"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-5955-9wpr-37jh"
          ],
          "NSP": [
            "1781"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-01T07:55:11.496417Z",
        "moduleName": "tar",
        "packageManager": "npm",
        "packageName": "tar",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-01T07:55:11.707292Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.1.9",
            ">=5.0.0 <5.0.10",
            "<4.4.18"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Arbitrary File Write",
        "from": [
          "juice-shop@9.3.1",
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.13"
        ],
        "upgradePath": [
          false,
          "sqlite3@4.1.1",
          "node-pre-gyp@0.11.0",
          "tar@4.4.18"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tar",
        "version": "4.4.13",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2021-05-30T12:45:07.317218Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[trim-newlines](https://www.npmjs.org/package/trim-newlines) is a Trim newlines from the start and/or end of a string\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the `end()` method.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `trim-newlines` to version 3.0.1, 4.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91)\n- [GitHub Release](https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1)\n",
        "disclosureTime": "2021-05-30T12:41:33Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.1",
          "4.0.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TRIMNEWLINES-1298042",
        "identifiers": {
          "CVE": [
            "CVE-2021-33623"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-7p7h-4mm5-852v"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-05-30T13:11:03.433323Z",
        "moduleName": "trim-newlines",
        "packageManager": "npm",
        "packageName": "trim-newlines",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-05-30T13:11:03.409185Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.0.1",
            ">=4.0.0 <4.0.1"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "from": [
          "juice-shop@9.3.1",
          "grunt@1.0.4",
          "dateformat@1.0.12",
          "meow@3.7.0",
          "trim-newlines@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "trim-newlines",
        "version": "1.0.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "credit": [
          "khizar"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "disclosureTime": "2022-02-13T14:44:04Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-13T15:26:37.914118Z",
        "moduleName": "unset-value",
        "packageManager": "npm",
        "packageName": "unset-value",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jonschlinkert/unset-value/issues/11"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jonschlinkert/unset-value/pull/12"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/jonschlinkert/unset-value/releases"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "check-dependencies@1.1.0",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "unset-value",
        "version": "1.0.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "credit": [
          "po6ix"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "disclosureTime": "2020-10-25T14:24:22Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-Y18N-1021887",
        "identifiers": {
          "CVE": [
            "CVE-2020-7774"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-c4w7-xm78-47vh"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-01-05T15:29:00.943111Z",
        "moduleName": "y18n",
        "packageManager": "npm",
        "packageName": "y18n",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-11-10T15:27:28Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/yargs/y18n/issues/96"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/yargs/y18n/pull/108"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "from": [
          "juice-shop@9.3.1",
          "replace@1.1.1",
          "yargs@12.0.5",
          "y18n@4.0.0"
        ],
        "upgradePath": [
          false,
          "replace@1.1.1",
          "yargs@12.0.5",
          "y18n@4.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "y18n",
        "version": "4.0.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-UNDERSCORESTRING-12168"
        ],
        "creationTime": "2018-06-21T17:51:09.741000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[underscore.string](https://www.npmjs.com/package/underscore.string) is a Javascript lacks complete string manipulation operations.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `underscore.string` to version 3.3.6 or higher.\n## References\n- [GitHub Commit](https://github.com/epeli/underscore.string/commit/f486cd684c94c12db48b45d52b1472a1b9661029)\n- [GitHub Commit](https://github.com/esamattis/underscore.string/commit/d095c4af392fe105797288c352c7ccb8a3413425)\n- [GitHub Issue](https://github.com/epeli/underscore.string/issues/510)\n- [GitHub PR](https://github.com/esamattis/underscore.string/pull/525)\n",
        "disclosureTime": "2017-09-08T17:51:09Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.3.6"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "unescapeHTML.js",
              "functionName": "module.exports"
            },
            "version": [
              ">2.4.1 <3.3.5"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "unescapeHTML.js",
              "functionName": "module.exports"
            },
            "version": [
              ">2.4.1 <3.3.5"
            ]
          }
        ],
        "id": "npm:underscore.string:20170908",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-UNDERSCORESTRING-12168"
          ],
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-v2p6-4mp7-3r9v"
          ],
          "NSP": [
            "745"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-25T12:34:17.626077Z",
        "moduleName": "underscore.string",
        "packageManager": "npm",
        "packageName": "underscore.string",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-06-25T13:19:28Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/epeli/underscore.string/commit/f486cd684c94c12db48b45d52b1472a1b9661029"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/esamattis/underscore.string/commit/d095c4af392fe105797288c352c7ccb8a3413425"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/epeli/underscore.string/issues/510"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/esamattis/underscore.string/pull/525"
          }
        ],
        "semver": {
          "vulnerable": [
            ">2.4.0 <3.3.6"
          ]
        },
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "juice-shop@9.3.1",
          "grunt@1.0.4",
          "grunt-legacy-util@1.1.1",
          "underscore.string@3.3.5"
        ],
        "upgradePath": [
          false,
          "grunt@1.0.4",
          "grunt-legacy-util@1.1.1",
          "underscore.string@3.3.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "underscore.string",
        "version": "3.3.5",
        "severityWithCritical": "high"
      }
    ],
    "upgrade": {
      "concurrently@5.0.2": {
        "upgradeTo": "concurrently@6.0.0",
        "upgrades": [
          "ansi-regex@4.1.0"
        ],
        "vulns": [
          "SNYK-JS-ANSIREGEX-1583908"
        ]
      },
      "express-jwt@0.1.3": {
        "upgradeTo": "express-jwt@6.0.0",
        "upgrades": [
          "express-jwt@0.1.3",
          "base64url@0.0.6",
          "jws@0.2.6",
          "jsonwebtoken@0.1.0",
          "moment@2.0.0",
          "moment@2.0.0",
          "moment@2.0.0"
        ],
        "vulns": [
          "SNYK-JS-EXPRESSJWT-575022",
          "npm:base64url:20180511",
          "npm:jws:20160726",
          "npm:jsonwebtoken:20150331",
          "npm:moment:20160126",
          "npm:moment:20161019",
          "npm:moment:20170905"
        ]
      },
      "grunt@1.0.4": {
        "upgradeTo": "grunt@1.3.0",
        "upgrades": [
          "getobject@0.1.0",
          "grunt@1.0.4"
        ],
        "vulns": [
          "SNYK-JS-GETOBJECT-1054932",
          "SNYK-JS-GRUNT-597546"
        ]
      },
      "notevil@1.3.2": {
        "upgradeTo": "notevil@1.3.3",
        "upgrades": [
          "notevil@1.3.2"
        ],
        "vulns": [
          "SNYK-JS-NOTEVIL-559176"
        ]
      },
      "pug@2.0.4": {
        "upgradeTo": "pug@3.0.1",
        "upgrades": [
          "pug@2.0.4",
          "uglify-js@2.8.29"
        ],
        "vulns": [
          "SNYK-JS-PUG-1071616",
          "SNYK-JS-UGLIFYJS-1727251"
        ]
      },
      "replace@1.1.1": {
        "upgradeTo": "replace@1.2.0",
        "upgrades": [
          "yargs-parser@11.1.1",
          "ansi-regex@3.0.0"
        ],
        "vulns": [
          "SNYK-JS-YARGSPARSER-560381",
          "SNYK-JS-ANSIREGEX-1583908"
        ]
      },
      "sanitize-html@1.4.2": {
        "upgradeTo": "sanitize-html@2.3.2",
        "upgrades": [
          "sanitize-html@1.4.2",
          "sanitize-html@1.4.2",
          "sanitize-html@1.4.2",
          "sanitize-html@1.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "lodash@2.4.2",
          "sanitize-html@1.4.2",
          "sanitize-html@1.4.2"
        ],
        "vulns": [
          "SNYK-JS-SANITIZEHTML-1070780",
          "SNYK-JS-SANITIZEHTML-1070786",
          "SNYK-JS-SANITIZEHTML-585892",
          "npm:sanitize-html:20161026",
          "SNYK-JS-LODASH-1018905",
          "SNYK-JS-LODASH-1040724",
          "SNYK-JS-LODASH-450202",
          "SNYK-JS-LODASH-567746",
          "SNYK-JS-LODASH-590103",
          "SNYK-JS-LODASH-608086",
          "SNYK-JS-LODASH-73638",
          "SNYK-JS-LODASH-73639",
          "npm:lodash:20180130",
          "npm:sanitize-html:20141024",
          "npm:sanitize-html:20160801"
        ]
      },
      "sequelize@5.21.3": {
        "upgradeTo": "sequelize@5.22.5",
        "upgrades": [
          "validator@10.11.0",
          "validator@10.11.0",
          "validator@10.11.0",
          "validator@10.11.0"
        ],
        "vulns": [
          "SNYK-JS-VALIDATOR-1090599",
          "SNYK-JS-VALIDATOR-1090600",
          "SNYK-JS-VALIDATOR-1090601",
          "SNYK-JS-VALIDATOR-1090602"
        ]
      },
      "socket.io@2.3.0": {
        "upgradeTo": "socket.io@3.0.0",
        "upgrades": [
          "engine.io@3.4.0",
          "socket.io@2.3.0",
          "ws@6.1.4",
          "xmlhttprequest-ssl@1.5.5",
          "xmlhttprequest-ssl@1.5.5"
        ],
        "vulns": [
          "SNYK-JS-ENGINEIO-1056749",
          "SNYK-JS-SOCKETIO-1024859",
          "SNYK-JS-WS-1296835",
          "SNYK-JS-XMLHTTPREQUESTSSL-1082936",
          "SNYK-JS-XMLHTTPREQUESTSSL-1255647"
        ]
      },
      "swagger-ui-express@4.1.2": {
        "upgradeTo": "swagger-ui-express@4.2.0",
        "upgrades": [
          "swagger-ui-dist@3.24.3"
        ],
        "vulns": [
          "SNYK-JS-SWAGGERUIDIST-2314884"
        ]
      }
    },
    "patch": {
      "SNYK-JS-LODASH-567746": {
        "paths": [
          {
            "concurrently > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "finale-rest > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt-contrib-compress > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "sequelize > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt > grunt-legacy-log > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt > grunt-legacy-util > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "portscanner > async > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "winston > async > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt-contrib-compress > archiver > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt > grunt-legacy-log > grunt-legacy-log-utils > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt-contrib-compress > archiver > archiver-utils > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt-contrib-compress > archiver > async > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt-contrib-compress > archiver > zip-stream > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "grunt-contrib-compress > archiver > zip-stream > archiver-utils > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "pug > pug-code-gen > constantinople > babel-types > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "pug > pug-filters > constantinople > babel-types > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          },
          {
            "pug > pug-code-gen > pug-attrs > constantinople > babel-types > lodash": {
              "patched": "2022-03-25T13:02:53.169Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 69,
  "projectName": "juice-shop",
  "displayTargetFile": "package.json",
  "path": "."
}
